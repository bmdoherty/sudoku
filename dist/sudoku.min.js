(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Sudoku"] = factory();
	else
		root["Sudoku"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var House =
/*#__PURE__*/
function () {
  function House(id, cells, grid) {
    _classCallCheck(this, House);

    this.id = id;
    this.cells = cells;
    this.grid = grid;
    return this;
  }

  _createClass(House, [{
    key: "isSolved",
    get: function get() {
      return this.usedCells.length === 9;
    }
  }, {
    key: "unused",
    get: function get() {
      var _this = this;

      var fullSet = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      return new Set(fullSet.filter(function (x) {
        return !_this.used.has(x);
      }));
    }
  }, {
    key: "used",
    get: function get() {
      return new Set(this.usedCells.map(function (cell) {
        return cell.digit;
      }));
    }
  }, {
    key: "usedCells",
    get: function get() {
      return this.cells.filter(function (v) {
        return v.digit !== 0;
      });
    }
  }, {
    key: "unusedCells",
    get: function get() {
      return this.cells.filter(function (v) {
        return v.digit === 0;
      });
    }
  }, {
    key: "links",
    get: function get() {
      var _this2 = this;

      var links = {};

      var _loop = function _loop(digit) {
        var digitLinks = _this2.cells.filter(function (v) {
          return v.possibilities.has(digit) && v.possibilities.size === 2;
        }).map(function (v) {
          return {
            'id': v.id,
            'possibilities': v.possibilities
          };
        });

        if (digitLinks.length > 1) {
          links[digit] = digitLinks;
        }
      };

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.unused[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var digit = _step.value;

          _loop(digit);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return links;
    }
  }]);

  return House;
}();

module.exports = {
  House: House
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Cell = _interopRequireDefault(__webpack_require__(6));

var _Row = _interopRequireDefault(__webpack_require__(2));

var _Column = _interopRequireDefault(__webpack_require__(3));

var _Square = _interopRequireDefault(__webpack_require__(4));

var _nakedSingle = _interopRequireDefault(__webpack_require__(7));

var _hiddenSingle = _interopRequireDefault(__webpack_require__(8));

var _naked = _interopRequireDefault(__webpack_require__(9));

var _hidden = _interopRequireDefault(__webpack_require__(10));

var _lockedCandidate = _interopRequireDefault(__webpack_require__(11));

var _XYChain = _interopRequireDefault(__webpack_require__(12));

var _fish = _interopRequireDefault(__webpack_require__(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ns = new _nakedSingle.default();
var hs = new _hiddenSingle.default();
var n = new _naked.default();
var h = new _hidden.default();
var lc = new _lockedCandidate.default();
var f = new _fish.default();
var xy = new _XYChain.default();
var strategies = [ns, hs, n, h, lc, f, xy];

var Grid =
/*#__PURE__*/
function () {
  function Grid(text) {
    var _house;

    _classCallCheck(this, Grid);

    this.cells = this.textToCells(text);
    this.square = [];
    this.row = [];
    this.column = [];
    this.house = [];

    for (var i = 0; i < 9; i++) {
      this.row.push(new _Row.default(i, this.getRow(i), this));
      this.column.push(new _Column.default(i, this.getColumn(i), this));
      this.square.push(new _Square.default(i, this.getSquare(i), this));
    }

    (_house = this.house).push.apply(_house, _toConsumableArray(this.row).concat(_toConsumableArray(this.column), _toConsumableArray(this.square)));
  }

  _createClass(Grid, [{
    key: "textToCells",
    value: function textToCells(text) {
      var cells = [];
      var rows = text.match(/.{1,9}/g);
      var digitArray = [];

      for (var i = 0; i < 9; i++) {
        digitArray[i] = rows[i].split('').map(Number);
      }

      for (var r = 0; r < 9; r++) {
        for (var c = 0; c < 9; c++) {
          var locked = !!digitArray[r][c];
          cells.push(new _Cell.default(this, r, c, digitArray[r][c], locked));
        }
      }

      return cells;
    }
  }, {
    key: "getSquare",
    value: function getSquare(id) {
      return this.cells.filter(function (v) {
        return v.squareID === id;
      });
    }
  }, {
    key: "getRow",
    value: function getRow(id) {
      return this.cells.filter(function (v) {
        return v.rowID === id;
      });
    }
  }, {
    key: "getColumn",
    value: function getColumn(id) {
      return this.cells.filter(function (v) {
        return v.columnID === id;
      });
    }
  }, {
    key: "isSolved",
    value: function isSolved() {
      var isSolved = true;

      for (var i = 0; i < 9; i++) {
        if (this.row[i].isSolved === false) {
          isSolved = false;
        }
      }

      return isSolved;
    }
  }, {
    key: "next",
    value: function next() {
      var next;

      for (var i in strategies) {
        next = strategies[i].find(this);

        if (next) {
          return next;
        }
      }
    }
  }, {
    key: "solve",
    value: function solve() {
      var i = 1;
      var nextStep = this.next();

      while (!this.isSolved() && nextStep) {
        // console.log(`${i}: ${nextStep.strategy.type} ${nextStep.length?nextStep.length:''}`)
        this.apply(nextStep);
        nextStep = this.next();
        i = i + 1;
      }

      return this;
    }
  }, {
    key: "apply",
    value: function apply(step) {
      step.strategy.apply(this, step);
      return;
    }
  }]);

  return Grid;
}();

exports.default = Grid;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isRow = isRow;
exports.default = void 0;

var _House2 = __webpack_require__(0);

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Row =
/*#__PURE__*/
function (_House) {
  _inherits(Row, _House);

  function Row(id, cells, grid) {
    var _this;

    _classCallCheck(this, Row);

    _this = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, id, cells, grid));
    _this.type = 'row';
    return _possibleConstructorReturn(_this, _this);
  }

  return Row;
}(_House2.House);

exports.default = Row;

function isRow(cells) {
  if (!cells.length) {
    return false;
  }

  return cells.every(function (v, i, a) {
    return v.rowID === a[0].rowID;
  });
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isColumn = isColumn;
exports.default = void 0;

var _House2 = __webpack_require__(0);

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Column =
/*#__PURE__*/
function (_House) {
  _inherits(Column, _House);

  function Column(id, cells, grid) {
    var _this;

    _classCallCheck(this, Column);

    _this = _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).call(this, id, cells, grid));
    _this.type = 'column';
    return _possibleConstructorReturn(_this, _this);
  }

  return Column;
}(_House2.House);

exports.default = Column;

function isColumn(cells) {
  if (!cells.length) {
    return false;
  }

  return cells.every(function (v, i, a) {
    return v.columnID === a[0].columnID;
  });
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSquare = isSquare;
exports.default = void 0;

var _House2 = __webpack_require__(0);

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Square =
/*#__PURE__*/
function (_House) {
  _inherits(Square, _House);

  function Square(id, cells, grid) {
    var _this;

    _classCallCheck(this, Square);

    _this = _possibleConstructorReturn(this, (Square.__proto__ || Object.getPrototypeOf(Square)).call(this, id, cells, grid));
    _this.type = 'square';
    return _possibleConstructorReturn(_this, _this);
  }

  return Square;
}(_House2.House);

exports.default = Square;

function isSquare(cells) {
  if (!cells.length) {
    return false;
  }

  return cells.every(function (v, i, a) {
    return v.squareID === a[0].squareID;
  });
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Grid", {
  enumerable: true,
  get: function get() {
    return _Grid.default;
  }
});
Object.defineProperty(exports, "isValid", {
  enumerable: true,
  get: function get() {
    return _isValid.default;
  }
});

var _Grid = _interopRequireDefault(__webpack_require__(1));

var _isValid = _interopRequireDefault(__webpack_require__(14));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Cell =
/*#__PURE__*/
function () {
  function Cell(grid, row, column, digit, locked) {
    _classCallCheck(this, Cell);

    this.id = row * 9 + column;
    this.grid = grid;
    this.rowID = row;
    this.columnID = column;
    this.locked = locked;
    this.squareID = Math.floor(row / 3) * 3 + Math.floor(column / 3);
    this.impossibilities = [];
    this._digit = digit;
    this.row = "R".concat(this.rowID + 1);
    this.column = "C".concat(this.columnID + 1);
    this.square = "S".concat(this.squareID + 1);
    return this;
  }

  _createClass(Cell, [{
    key: "getPossibilities",
    value: function getPossibilities() {
      if (this.digit) {
        return new Set();
      }

      var possibles = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);

      for (var i = 0; i < this.impossibilities.length; i++) {
        possibles.delete(this.impossibilities[i]);
      }

      var s = this.grid.square[this.squareID].cells.map(function (v) {
        return v.digit;
      }).filter(function (v) {
        return v !== 0;
      });
      var r = this.grid.row[this.rowID].cells.map(function (v) {
        return v.digit;
      }).filter(function (v) {
        return v !== 0;
      });
      var c = this.grid.column[this.columnID].cells.map(function (v) {
        return v.digit;
      }).filter(function (v) {
        return v !== 0;
      });
      var used = new Set(r.concat(c).concat(s));
      return new Set(_toConsumableArray(possibles).filter(function (v) {
        return !used.has(v);
      }));
    }
  }, {
    key: "addToImpossibilities",
    value: function addToImpossibilities(digit) {
      this.impossibilities.push(digit);
      return this.impossibilities;
    }
  }, {
    key: "digit",
    get: function get() {
      return this._digit;
    },
    set: function set(digit) {
      var _this = this;

      //console.log('cell set : ' + digit + ' id: ' + this.id)
      this.grid.row[this.rowID].used.add(digit);
      this.grid.row[this.rowID].unused.delete(digit);
      this.grid.column[this.columnID].used.add(digit);
      this.grid.column[this.columnID].unused.delete(digit);
      this.grid.square[this.squareID].used.add(digit);
      this.grid.square[this.squareID].unused.delete(digit);
      this.grid.row[this.rowID].cells.filter(function (v) {
        return v.id !== _this.id;
      }).forEach(function (v) {
        return v.impossibilities.concat(digit);
      });
      this.grid.column[this.columnID].cells.filter(function (v) {
        return v.id !== _this.id;
      }).forEach(function (v) {
        return v.impossibilities.concat(digit);
      });
      this.grid.square[this.squareID].cells.filter(function (v) {
        return v.id !== _this.id;
      }).forEach(function (v) {
        return v.impossibilities.concat(digit);
      });
      this._digit = digit;
    }
  }, {
    key: "excluded",
    get: function get() {
      var _this2 = this;

      return [1, 2, 3, 4, 5, 6, 7, 8, 9].filter(function (v) {
        return _toConsumableArray(_this2.impossibilities).indexOf(v) > -1;
      }).filter(function (v) {
        return _toConsumableArray(_this2.possibilities).indexOf(v) === -1;
      });
    }
  }, {
    key: "possibilities",
    get: function get() {
      return this.getPossibilities();
    }
  }, {
    key: "canSee",
    get: function get() {
      var s = this.grid.square[this.squareID].cells;
      var r = this.grid.row[this.rowID].cells;
      var c = this.grid.column[this.columnID].cells;
      return new Set(r.concat(c).concat(s));
    }
  }]);

  return Cell;
}();

exports.default = Cell;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var usedBy = function usedBy(cell, grid) {
  var used = []; // all used found in one house

  var _arr = ['row', 'column', 'square'];

  for (var _i = 0; _i < _arr.length; _i++) {
    var houseType = _arr[_i];
    var houseID = cell[houseType + 'ID'];
    var houseCells = grid[houseType][houseID].cells;

    if (houseCells.filter(function (v) {
      return v.digit > 0;
    }).length === 8) {
      used = houseCells.filter(function (v) {
        return v.digit > 0;
      }).map(function (v) {
        return v.id;
      });
      return used;
    }
  } // used found in different houses


  var cells = _toConsumableArray(cell.canSee);

  var _loop = function _loop(i) {
    var seenBy = cells.filter(function (v) {
      return v.digit === i;
    }).map(function (v) {
      return v.id;
    }).map(Number)[0];

    if (!isNaN(seenBy)) {
      used.push(seenBy);
    }
  };

  for (var i = 1; i <= 9; i++) {
    _loop(i);
  }

  return used;
};

var NakedSingle =
/*#__PURE__*/
function () {
  function NakedSingle() {
    _classCallCheck(this, NakedSingle);

    this.type = 'NakedSingle';
    return this;
  }

  _createClass(NakedSingle, [{
    key: "find",
    value: function find(grid) {
      var candidateCells = grid.cells.filter(function (cell) {
        return cell.possibilities.size === 1;
      });

      if (candidateCells.length) {
        var cell = candidateCells[0];
        var digit = cell.possibilities.values().next().value;
        var used = usedBy(cell, grid);
        return {
          'id': cell.id,
          'digit': digit,
          'used': used,
          'strategy': this
        };
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      grid.cells[step.id].digit = step.digit;
    }
  }]);

  return NakedSingle;
}();

exports.default = NakedSingle;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HiddenSingle =
/*#__PURE__*/
function () {
  function HiddenSingle() {
    _classCallCheck(this, HiddenSingle);

    this.type = 'HiddenSingle';
    return this;
  }

  _createClass(HiddenSingle, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      // house must have at least 2 empty cells to be hidden single
      var candidateHouses = grid.house.filter(function (house) {
        return house.unused.size > 1;
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _house = _step.value;

          var _loop = function _loop(digit) {
            var possibleCells = _house.cells.filter(function (v) {
              return v.possibilities.has(digit);
            });

            if (possibleCells.length === 1) {
              return {
                v: {
                  'id': possibleCells[0].id,
                  'digit': digit,
                  'house': _house,
                  'strategy': _this
                }
              };
            }
          };

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _house.unused.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var digit = _step2.value;

              var _ret = _loop(digit);

              if (_typeof(_ret) === "object") return _ret.v;
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      grid.cells[step.id].digit = step.digit;
    }
  }]);

  return HiddenSingle;
}();

exports.default = HiddenSingle;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var cellsAffected = function cellsAffected(house, id, digits) {
  var cells = house.cells.filter(function (cell) {
    return id.indexOf(cell.id) === -1;
  }).filter(function (cell) {
    return _toConsumableArray(cell.possibilities).some(function (p) {
      return digits.indexOf(p) > -1;
    });
  });
  return cells;
};

var canExcludeAPossibilty = function canExcludeAPossibilty(house, id, digits) {
  return !!cellsAffected(house, id, digits).length;
};

var Naked =
/*#__PURE__*/
function () {
  function Naked() {
    _classCallCheck(this, Naked);

    this.type = 'Naked';
    return this;
  }

  _createClass(Naked, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      var candidateHouses;

      var _loop = function _loop(size) {
        candidateHouses = grid.house.filter(function (house) {
          return house.unused.size > size;
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _house = _step.value;

            var possibleSetOfNakedDigits = _house.cells.filter(function (cell) {
              return cell.possibilities.size <= size;
            }).map(function (cell) {
              return _toConsumableArray(cell.possibilities);
            });

            var _loop2 = function _loop2(possibleNakedDigits) {
              var possibleSetOfNakedCells = _house.unusedCells.filter(function (cell) {
                return _toConsumableArray(cell.possibilities).every(function (v) {
                  return possibleNakedDigits.indexOf(v) > -1;
                });
              });

              if (possibleSetOfNakedCells.length === size) {
                var id = possibleSetOfNakedCells.map(function (v) {
                  return v.id;
                });
                var digits = possibleNakedDigits;

                if (canExcludeAPossibilty(_house, id, digits)) {
                  return {
                    v: {
                      v: {
                        'id': id,
                        'digits': digits,
                        'house': _house,
                        'length': size,
                        'strategy': _this
                      }
                    }
                  };
                }
              }
            };

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = possibleSetOfNakedDigits[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var possibleNakedDigits = _step2.value;

                var _ret2 = _loop2(possibleNakedDigits);

                if (_typeof(_ret2) === "object") return _ret2.v;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };

      for (var size = 2; size <= 4; size++) {
        var _ret = _loop(size);

        if (_typeof(_ret) === "object") return _ret.v;
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      cellsAffected(step.house, step.id, step.digits).forEach(function (v) {
        v.impossibilities = v.impossibilities.concat(step.digits);
      });
      return true;
    }
  }]);

  return Naked;
}();

exports.default = Naked;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var canExcludeAPossibilty = function canExcludeAPossibilty(hiddenCellSet, hiddenDigitSet) {
  var cells = hiddenCellSet.filter(function (cell) {
    return cell.possibilities.size > hiddenDigitSet.length;
  });
  return !!cells.length;
};

var combinations = function combinations(str, length) {
  var fn = function fn(rest, length) {
    var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    if (!active.length && !rest.length) {
      return;
    }

    if (!rest.length) {
      if (active.length === length) {
        out.push(active);
      }
    } else {
      fn(rest.slice(1), length, active.concat(rest[0]), out);
      fn(rest.slice(1), length, active, out);
    }

    return out;
  };

  return fn(str, length);
};

var compare = function compare(a, b) {
  return a.length === b.length && a.every(function (v, i) {
    return v === b[i];
  });
};

var Hidden =
/*#__PURE__*/
function () {
  function Hidden() {
    _classCallCheck(this, Hidden);

    this.type = 'Hidden';
    return this;
  }

  _createClass(Hidden, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      var _loop = function _loop(size) {
        var candidateHouses = grid.house.filter(function (house) {
          return house.unused.size >= size + (size - 1);
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _house = _step.value;
            var possibleSetOfHiddenDigits = combinations(_toConsumableArray(_house.unused), size);

            var _loop2 = function _loop2(possibleHiddenDigits) {
              var possibleSetOfHiddenCells = _house.unusedCells.filter(function (cell) {
                return _toConsumableArray(cell.possibilities).some(function (v) {
                  return possibleHiddenDigits.indexOf(v) > -1;
                });
              });

              if (possibleSetOfHiddenCells.length === size) {
                if (canExcludeAPossibilty(possibleSetOfHiddenCells, possibleHiddenDigits)) {
                  var id = possibleSetOfHiddenCells.map(function (v) {
                    return v.id;
                  });
                  var digits = possibleHiddenDigits;
                  return {
                    v: {
                      v: {
                        'id': id,
                        'digits': digits,
                        'house': _house,
                        'length': size,
                        'strategy': _this
                      }
                    }
                  };
                }
              }
            };

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = possibleSetOfHiddenDigits[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var possibleHiddenDigits = _step2.value;

                var _ret2 = _loop2(possibleHiddenDigits);

                if (_typeof(_ret2) === "object") return _ret2.v;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };

      // need at least 3 for 2 unused cells to find a hidden double
      for (var size = 2; size <= 4; size++) {
        var _ret = _loop(size);

        if (_typeof(_ret) === "object") return _ret.v;
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      step.house.cells.filter(function (cell) {
        return step.id.indexOf(cell.id) > -1;
      }).forEach(function (cell) {
        var _cell$impossibilities;

        var impossible = _toConsumableArray(cell.possibilities).filter(function (p) {
          return step.digits.indexOf(p) === -1;
        });

        cell.impossibilities = (_cell$impossibilities = cell.impossibilities).concat.apply(_cell$impossibilities, _toConsumableArray(impossible));
      });
      return true;
    }
  }]);

  return Hidden;
}();

exports.default = Hidden;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Square = __webpack_require__(4);

var _Row = __webpack_require__(2);

var _Column = __webpack_require__(3);

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var cellIsNotInArray = function cellIsNotInArray(cell, array) {
  return array.indexOf(cell.id) === -1;
};

var LockedCandidate =
/*#__PURE__*/
function () {
  function LockedCandidate() {
    _classCallCheck(this, LockedCandidate);

    this.type = 'LockedCandidate';
    return this;
  }

  _createClass(LockedCandidate, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      var candidateHouses = grid.house.filter(function (house) {
        return house.unused.size > 0;
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _house = _step.value;

          switch (_house.type) {
            case 'row':
            case 'column':
              var _loop = function _loop(digit) {
                var possibleCells = _house.cells.filter(function (v) {
                  return v.possibilities.has(digit);
                });

                if (possibleCells.length > 1) {
                  if ((0, _Square.isSquare)(possibleCells)) {
                    var squareID = possibleCells[0].squareID;
                    var total = grid.square[squareID].cells.filter(function (v) {
                      return v.possibilities.has(digit);
                    });

                    if (possibleCells.length < total.length) {
                      var locked = grid.square[squareID];
                      var ids = possibleCells.map(function (v) {
                        return v.id;
                      });
                      return {
                        v: {
                          'ids': ids,
                          'digit': digit,
                          'house': _house,
                          'locked': locked,
                          'strategy': _this
                        }
                      };
                    }
                  }
                }
              };

              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = _house.unused[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var digit = _step2.value;

                  var _ret = _loop(digit);

                  if (_typeof(_ret) === "object") return _ret.v;
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              break;

            case 'square':
              var _loop2 = function _loop2(_digit) {
                var possibleCells = _house.cells.filter(function (v) {
                  return v.possibilities.has(_digit);
                });

                if (possibleCells.length > 1) {
                  if ((0, _Row.isRow)(possibleCells)) {
                    var rowID = possibleCells[0].rowID;
                    var total = grid.row[rowID].cells.filter(function (v) {
                      return v.possibilities.has(_digit);
                    });

                    if (possibleCells.length < total.length) {
                      var locked = grid.row[rowID];
                      var ids = possibleCells.map(function (v) {
                        return v.id;
                      });
                      return {
                        v: {
                          'ids': ids,
                          'digit': _digit,
                          'house': _house,
                          'locked': locked,
                          'strategy': _this
                        }
                      };
                    }
                  }

                  if ((0, _Column.isColumn)(possibleCells)) {
                    var columnID = possibleCells[0].columnID;

                    var _total = grid.column[columnID].cells.filter(function (v) {
                      return v.possibilities.has(_digit);
                    });

                    if (possibleCells.length < _total.length) {
                      var _locked = grid.column[columnID];

                      var _ids = possibleCells.map(function (v) {
                        return v.id;
                      });

                      return {
                        v: {
                          'ids': _ids,
                          'digit': _digit,
                          'house': _house,
                          'locked': _locked,
                          'strategy': _this
                        }
                      };
                    }
                  }
                }
              };

              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = _house.unused[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var _digit = _step3.value;

                  var _ret2 = _loop2(_digit);

                  if (_typeof(_ret2) === "object") return _ret2.v;
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              break;

            default:
              break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      grid[step.locked.type][step.locked.id].cells.filter(function (v) {
        return step.ids.indexOf(v.id) === -1;
      }).filter(function (v) {
        return v.possibilities.has(step.digit);
      }).forEach(function (v) {
        v.addToImpossibilities(step.digit);
      });
      return true;
    }
  }]);

  return LockedCandidate;
}();

exports.default = LockedCandidate;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var makeChainLink = function makeChainLink(grid, node, cells, size) {
  var chain = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var visited = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
  var out = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];

  var processLink = function processLink(node, chain) {
    var excluded = _toConsumableArray(chain[0].cell.canSee).filter(function (v) {
      return node.cell.canSee.has(v);
    }).filter(function (v) {
      return v.possibilities.has(node.mustBe);
    });

    var sameRow = chain[0].cell.rowID === node.cell.rowID;
    var sameColumn = chain[0].cell.columnID === node.cell.columnID;
    var sameSquare = chain[0].cell.squareID === node.cell.squareID;

    if (excluded.length && !sameRow && !sameColumn && !sameSquare) {
      visited.push(node.cell.id);
      out.push(chain);
    }
  };

  var nextLink = function nextLink(house, node) {
    var links = house.links[node.mustBe].filter(function (v) {
      return visited.indexOf(v.id) === -1;
    }).filter(function (v) {
      return v.id !== cell.id;
    });

    if (links.length) {
      var linkCell = grid.cells[links[0].id];

      var mustBe = _toConsumableArray(linkCell.possibilities.values()).filter(function (v) {
        return v !== node.mustBe;
      })[0];

      var cannotBe = _toConsumableArray(linkCell.possibilities.values()).filter(function (v) {
        return v !== mustBe;
      })[0];

      makeChainLink(grid, {
        'cell': linkCell,
        'mustBe': mustBe,
        'cannotBe': cannotBe
      }, cells.filter(function (v) {
        return v.id !== cell.id;
      }), size, chain.slice(0), visited, out);
    }
  };

  var cell = node.cell;
  chain.push(node);

  if (!cells.length || chain.length > size) {
    return;
  }

  if (node.mustBe === chain[0].cannotBe) {
    processLink(node, chain);
  } else {
    // row
    if (grid.row[cell.rowID].links[node.mustBe]) {
      nextLink(grid.row[cell.rowID], node);
    } // column


    if (grid.column[cell.columnID].links[node.mustBe]) {
      nextLink(grid.column[cell.columnID], node);
    } // square


    if (grid.square[cell.squareID].links[node.mustBe]) {
      nextLink(grid.square[cell.squareID], node);
    }
  }

  return out;
};

var XYChain =
/*#__PURE__*/
function () {
  function XYChain() {
    _classCallCheck(this, XYChain);

    this.type = 'XYChain';
    return this;
  }

  _createClass(XYChain, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      var candidateHouses = grid.house.filter(function (house) {
        return house.unused.size > 0;
      });

      for (var size = 3; size < 10; size++) {
        var _loop = function _loop(digit) {
          var bivalueCells = grid.cells.filter(function (v) {
            return v.possibilities.size === 2;
          });
          var startCells = bivalueCells.filter(function (v) {
            return v.possibilities.has(digit);
          });

          var _loop2 = function _loop2() {
            var cell = startCells[0];
            startCells = startCells.filter(function (v) {
              return v.id !== cell.id;
            });
            bivalueCells = bivalueCells.filter(function (v) {
              return v.id !== cell.id;
            });

            var mustBe = _toConsumableArray(cell.possibilities).filter(function (v) {
              return v !== digit;
            })[0];

            var node = {
              'cell': cell,
              'mustBe': mustBe,
              'cannotBe': digit
            };
            var chain = makeChainLink(grid, node, bivalueCells.map(function (v) {
              return v.id;
            }), size);

            if (chain && chain.length && chain[0].length) {
              return {
                v: {
                  v: {
                    'chain': chain,
                    'type': 'XYChain',
                    'length': chain.length,
                    'strategy': _this
                  }
                }
              };
            }
          };

          while (startCells.length) {
            var _ret2 = _loop2();

            if (_typeof(_ret2) === "object") return _ret2.v;
          }
        };

        for (var digit = 1; digit <= 9; digit++) {
          var _ret = _loop(digit);

          if (_typeof(_ret) === "object") return _ret.v;
        }
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      var start = step.chain[0][0];
      var end = step.chain[0][step.chain.length - 1]; //console.log(start)

      var excluded = _toConsumableArray(start.cell.canSee).filter(function (v) {
        return end.cell.canSee.has(v);
      }).filter(function (v) {
        return v.possibilities.has(start.cannotBe);
      }).forEach(function (v) {
        v.addToImpossibilities(end.mustBe);
      });

      return excluded;
    }
  }]);

  return XYChain;
}();

exports.default = XYChain;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var byDigit = function byDigit(digit) {
  return function (house) {
    return house.cells.filter(function (cell) {
      return cell.possibilities.has(digit);
    }).length >= 2;
  };
};

var linkToColumns = function linkToColumns(digit) {
  return function (row) {
    var columnIDs = row.cells.filter(function (v) {
      return v.possibilities.has(digit);
    }).map(function (v) {
      return v.columnID;
    });
    return {
      'rowID': row.id,
      'columnIDs': columnIDs
    };
  };
};

var extractUniqueFishColumns = function extractUniqueFishColumns(possibleFishRows, rowsAndThierColumns) {
  var fishColumns = [];

  var _loop = function _loop(i) {
    var row = rowsAndThierColumns.find(function (row) {
      return row.rowID === possibleFishRows[i];
    });
    var columnIDs = row.columnIDs;
    fishColumns.push.apply(fishColumns, _toConsumableArray(columnIDs));
  };

  for (var i = 0; i < possibleFishRows.length; i++) {
    _loop(i);
  }

  return _toConsumableArray(new Set(fishColumns));
};

var canExcludeCellsBasedOnFish = function canExcludeCellsBasedOnFish(grid, digit, fishRows, fishColumns) {
  var cellsToExclude = grid.cells.filter(function (v) {
    return v.possibilities.has(digit);
  }).filter(function (v) {
    return fishRows.indexOf(v.rowID) === -1;
  }).filter(function (v) {
    return fishColumns.indexOf(v.columnID) > -1;
  });
  return cellsToExclude.length;
};

var combinations = function combinations(str, length) {
  var fn = function fn(rest, length) {
    var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    if (!active.length && !rest.length) {
      return;
    }

    if (!rest.length) {
      if (active.length === length) {
        out.push(active);
      }
    } else {
      fn(rest.slice(1), length, active.concat(rest[0]), out);
      fn(rest.slice(1), length, active, out);
    }

    return out;
  };

  return fn(str, length);
};

var Fish =
/*#__PURE__*/
function () {
  function Fish() {
    _classCallCheck(this, Fish);

    this.type = 'Fish';
    return this;
  }

  _createClass(Fish, [{
    key: "find",
    value: function find(grid) {
      for (var digit = 1; digit <= 9; digit++) {
        var rowsWithDigitTwice = grid.row.filter(byDigit(digit));

        if (rowsWithDigitTwice.length) {
          var rowsAndThierColumns = rowsWithDigitTwice.map(linkToColumns(digit)).filter(function (v) {
            return v.columnIDs.length >= 2;
          });

          if (rowsAndThierColumns.length) {
            // 2 == XY-Wing
            // 3 == swordfish
            // 4 == jellyfish                    
            for (var size = 2; size <= 4; size++) {
              var rowIDs = rowsAndThierColumns.map(function (row) {
                return row.rowID;
              }); // all possible rowID combinations (where row contains digit) of required size

              var possibleSetOfFishRowCombinations = combinations(rowIDs, size);
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = possibleSetOfFishRowCombinations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var _possibleFishRows = _step.value;
                  var fishColumns = extractUniqueFishColumns(_possibleFishRows, rowsAndThierColumns); // fishColumns and possibleSetOfFishRows are both equal to size required, so we have a fish

                  if (fishColumns.length === size) {
                    var fishRows = _possibleFishRows; // dont return unless it progresses grid solving

                    if (canExcludeCellsBasedOnFish(grid, digit, fishRows, fishColumns)) {
                      return {
                        'digit': digit,
                        'rows': fishRows,
                        'columns': fishColumns,
                        'length': fishRows.length,
                        'strategy': this
                      };
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }
          }
        }
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      grid.cells.filter(function (v) {
        return v.possibilities.has(step.digit);
      }).filter(function (v) {
        return step.rows.indexOf(v.rowID) === -1;
      }).filter(function (v) {
        return step.columns.indexOf(v.columnID) > -1;
      }).forEach(function (v) {
        v.addToImpossibilities(step.digit);
      });
      return true;
    }
  }]);

  return Fish;
}();

exports.default = Fish;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isValid;

var _Grid = _interopRequireDefault(__webpack_require__(1));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isValid(text) {
  function hasDuplicates(a) {
    return a.length - new Set(a).size;
  }

  var rows = text.match(/.{1,9}/g);
  var grid = {};
  grid.row = [];
  grid.column = [];
  grid.square = [];

  for (var i = 0; i < 9; i++) {
    grid.row[i] = [];
    grid.column[i] = [];
    grid.square[i] = [];
  } // if(text.length !== 81){
  //     return { 'isValid':false, 'message':'Grid does not contain 81 digits'}
  // }


  if (rows.length !== 9) {
    return {
      'isValid': false,
      'message': 'Grid does not contain 9 rows'
    };
  }

  var row = [];

  for (var rowID = 0; rowID < 9; rowID++) {
    row = rows[rowID].split('');

    if (row.length !== 9) {
      return {
        'isValid': false,
        'message': 'Grid does not contain 9 numbers in row'
      };
    }

    row = row.map(Number).filter(function (v) {
      return !isNaN(v);
    });

    if (row.length !== 9) {
      return {
        'isValid': false,
        'message': 'Grid contains non numeric values'
      };
    }

    grid.row[rowID] = row;

    for (var columnID = 0; columnID < 9; columnID++) {
      var squareID = Math.floor(rowID / 3) * 3 + Math.floor(columnID / 3);
      grid.column[columnID].push(row[columnID]);
      grid.square[squareID].push(row[columnID]);
    }
  }

  var _arr = ['row', 'column', 'square'];

  for (var _i = 0; _i < _arr.length; _i++) {
    var house = _arr[_i];
    var nonZeroTotal = 0;

    for (var _i2 = 0; _i2 < 9; _i2++) {
      var nonZeroValues = grid[house][_i2].filter(function (v) {
        return v !== 0;
      });

      if (nonZeroValues.length) {
        nonZeroTotal = nonZeroTotal + nonZeroValues.length;

        if (hasDuplicates(nonZeroValues)) {
          return {
            'isValid': false,
            'message': "Grid contains duplicates in ".concat(house, " ").concat(_i2 + 1)
          };
        }
      }
    }

    if (nonZeroTotal < 17) {
      return {
        'isValid': false,
        'message': 'Grid contains less than 17 digits'
      };
    }
  }

  grid = new _Grid.default(text).solve();

  if (grid.isSolved()) {
    return {
      'isValid': true,
      'message': 'Grid can be solved'
    };
  }

  return {
    'isValid': false,
    'message': 'Grid can not be solved by this tool'
  };
} //module.exports = {isValid}

/***/ })
/******/ ]);
});