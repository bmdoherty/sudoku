(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Sudoku"] = factory();
	else
		root["Sudoku"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 10);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isRow = isRow;
exports.default = void 0;

var _House2 = _interopRequireDefault(__webpack_require__(1));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Row =
/*#__PURE__*/
function (_House) {
  _inherits(Row, _House);

  function Row(id, cells, grid) {
    var _this;

    _classCallCheck(this, Row);

    _this = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, id, cells, grid));
    _this.type = "row";
    return _possibleConstructorReturn(_this, _this);
  }

  return Row;
}(_House2.default);

exports.default = Row;

function isRow(cells) {
  return cells.every(function (v, i, a) {
    return v.rowID === a[0].rowID;
  });
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var House =
/*#__PURE__*/
function () {
  function House(id, cells, grid) {
    _classCallCheck(this, House);

    this.id = id;
    this.cells = cells;
    this.grid = grid;
    return this;
  }

  _createClass(House, [{
    key: "isSolved",
    get: function get() {
      return this.usedCells.length === 9;
    }
  }, {
    key: "unused",
    get: function get() {
      var _this = this;

      var fullSet = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      return new Set(fullSet.filter(function (x) {
        return !_this.used.has(x);
      }));
    }
  }, {
    key: "used",
    get: function get() {
      return new Set(this.usedCells.map(function (cell) {
        return cell.digit;
      }));
    }
  }, {
    key: "usedCells",
    get: function get() {
      return this.cells.filter(function (v) {
        return v.digit !== 0;
      });
    }
  }, {
    key: "unusedCells",
    get: function get() {
      return this.cells.filter(function (v) {
        return v.digit === 0;
      });
    }
  }, {
    key: "links",
    get: function get() {
      var _this2 = this;

      var links = {};

      var _loop = function _loop(digit) {
        var digitLinks = _this2.cells.filter(function (v) {
          return v.possibilities.has(digit) && v.possibilities.size === 2;
        }).map(function (v) {
          return {
            id: v.id,
            possibilities: v.possibilities
          };
        });

        if (digitLinks.length > 1) {
          links[digit] = digitLinks;
        }
      };

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.unused[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var digit = _step.value;

          _loop(digit);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return links;
    }
  }]);

  return House;
}();

exports.default = House;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isColumn = isColumn;
exports.default = void 0;

var _House2 = _interopRequireDefault(__webpack_require__(1));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Column =
/*#__PURE__*/
function (_House) {
  _inherits(Column, _House);

  function Column(id, cells, grid) {
    var _this;

    _classCallCheck(this, Column);

    _this = _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).call(this, id, cells, grid));
    _this.type = "column";
    return _possibleConstructorReturn(_this, _this);
  }

  return Column;
}(_House2.default);

exports.default = Column;

function isColumn(cells) {
  return cells.every(function (v, i, a) {
    return v.columnID === a[0].columnID;
  });
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSquare = isSquare;
exports.default = void 0;

var _House2 = _interopRequireDefault(__webpack_require__(1));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Square =
/*#__PURE__*/
function (_House) {
  _inherits(Square, _House);

  function Square(id, cells, grid) {
    var _this;

    _classCallCheck(this, Square);

    _this = _possibleConstructorReturn(this, (Square.__proto__ || Object.getPrototypeOf(Square)).call(this, id, cells, grid));
    _this.type = "square";
    return _possibleConstructorReturn(_this, _this);
  }

  return Square;
}(_House2.default);

exports.default = Square;

function isSquare(cells) {
  return cells.every(function (v, i, a) {
    return v.squareID === a[0].squareID;
  });
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Grid = _interopRequireDefault(__webpack_require__(12));

var _nakedSingle = _interopRequireDefault(__webpack_require__(13));

var _hiddenSingle = _interopRequireDefault(__webpack_require__(14));

var _naked = _interopRequireDefault(__webpack_require__(15));

var _hidden = _interopRequireDefault(__webpack_require__(6));

var _lockedCandidate = _interopRequireDefault(__webpack_require__(7));

var _XYChain = _interopRequireDefault(__webpack_require__(8));

var _fish = _interopRequireDefault(__webpack_require__(9));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ns = new _nakedSingle.default();
var hs = new _hiddenSingle.default();
var n = new _naked.default();
var h = new _hidden.default();
var lc = new _lockedCandidate.default();
var f = new _fish.default();
var xy = new _XYChain.default();
var strategies = [ns, hs, n, h, lc, f, xy];

var Solver =
/*#__PURE__*/
function () {
  function Solver(text) {
    _classCallCheck(this, Solver);

    this.grid = new _Grid.default(text);
    return this;
  }

  _createClass(Solver, [{
    key: "isSolved",
    value: function isSolved() {
      var isSolved = true;

      for (var i = 0; i < 9; i++) {
        if (this.grid.row[i].isSolved === false) {
          isSolved = false;
        }
      }

      return isSolved;
    }
  }, {
    key: "next",
    value: function next() {
      var next;

      for (var i in strategies) {
        next = strategies[i].find(this.grid);

        if (next) {
          return next;
        }
      }
    }
  }, {
    key: "solve",
    value: function solve() {
      var i = 1;
      var nextStep = this.next();

      while (!this.isSolved() && nextStep) {
        this.apply(nextStep);
        nextStep = this.next();
        i = i + 1;
      }

      return this;
    }
  }, {
    key: "apply",
    value: function apply(step) {
      step.strategy.apply(this.grid, step);
      return;
    }
  }, {
    key: "firstRow",
    value: function firstRow() {
      return this.grid.row[0].cells.map(function (v) {
        return v.digit;
      });
    }
  }]);

  return Solver;
}();

exports.default = Solver;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Cell =
/*#__PURE__*/
function () {
  function Cell(grid, row, column, digit, locked) {
    _classCallCheck(this, Cell);

    this.id = row * 9 + column;
    this.grid = grid;
    this.rowID = row;
    this.columnID = column;
    this.locked = locked;
    this.squareID = Math.floor(row / 3) * 3 + Math.floor(column / 3);
    this.impossibilities = [];
    this._digit = digit;
    this.row = "R".concat(this.rowID + 1);
    this.column = "C".concat(this.columnID + 1);
    this.square = "S".concat(this.squareID + 1);
    return this;
  }

  _createClass(Cell, [{
    key: "getPossibilities",
    value: function getPossibilities() {
      if (this.digit) {
        return new Set();
      }

      var possibles = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);

      for (var i = 0; i < this.impossibilities.length; i++) {
        possibles.delete(this.impossibilities[i]);
      }

      var s = this.grid.square[this.squareID].cells.map(function (v) {
        return v.digit;
      }).filter(function (v) {
        return v !== 0;
      });
      var r = this.grid.row[this.rowID].cells.map(function (v) {
        return v.digit;
      }).filter(function (v) {
        return v !== 0;
      });
      var c = this.grid.column[this.columnID].cells.map(function (v) {
        return v.digit;
      }).filter(function (v) {
        return v !== 0;
      });
      var used = new Set(r.concat(c).concat(s));
      return new Set(_toConsumableArray(possibles).filter(function (v) {
        return !used.has(v);
      }));
    }
  }, {
    key: "addToImpossibilities",
    value: function addToImpossibilities(digit) {
      this.impossibilities.push(digit);
      return this.impossibilities;
    }
  }, {
    key: "digit",
    get: function get() {
      return this._digit;
    },
    set: function set(digit) {
      var _this = this;

      this.grid.row[this.rowID].used.add(digit);
      this.grid.row[this.rowID].unused.delete(digit);
      this.grid.column[this.columnID].used.add(digit);
      this.grid.column[this.columnID].unused.delete(digit);
      this.grid.square[this.squareID].used.add(digit);
      this.grid.square[this.squareID].unused.delete(digit);
      this.grid.row[this.rowID].cells.filter(function (v) {
        return v.id !== _this.id;
      }).forEach(function (v) {
        return v.impossibilities.concat(digit);
      });
      this.grid.column[this.columnID].cells.filter(function (v) {
        return v.id !== _this.id;
      }).forEach(function (v) {
        return v.impossibilities.concat(digit);
      });
      this.grid.square[this.squareID].cells.filter(function (v) {
        return v.id !== _this.id;
      }).forEach(function (v) {
        return v.impossibilities.concat(digit);
      });
      this._digit = digit;
    }
  }, {
    key: "possibilities",
    get: function get() {
      return this.getPossibilities();
    }
  }, {
    key: "canSee",
    get: function get() {
      var s = this.grid.square[this.squareID].cells;
      var r = this.grid.row[this.rowID].cells;
      var c = this.grid.column[this.columnID].cells;
      return new Set(r.concat(c).concat(s));
    }
  }]);

  return Cell;
}();

exports.default = Cell;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var canExcludeAPossibilty = function canExcludeAPossibilty(hiddenCellSet, hiddenDigitSet) {
  var cells = hiddenCellSet.filter(function (cell) {
    return cell.possibilities.size > hiddenDigitSet.length;
  });
  return !!cells.length;
};

var combinations = function combinations(str, length) {
  var fn = function fn(rest, length) {
    var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    if (!active.length && !rest.length) {
      return;
    }

    if (!rest.length) {
      if (active.length === length) {
        out.push(active);
      }
    } else {
      fn(rest.slice(1), length, active.concat(rest[0]), out);
      fn(rest.slice(1), length, active, out);
    }

    return out;
  };

  return fn(str, length);
};

var Hidden =
/*#__PURE__*/
function () {
  function Hidden() {
    _classCallCheck(this, Hidden);

    this.type = "Hidden";
    return this;
  }

  _createClass(Hidden, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      var _loop = function _loop(size) {
        var candidateHouses = grid.house.filter(function (house) {
          return house.unused.size >= size + (size - 1);
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _house = _step.value;
            var possibleSetOfHiddenDigits = combinations(_toConsumableArray(_house.unused), size);

            var _loop2 = function _loop2(possibleHiddenDigits) {
              var possibleSetOfHiddenCells = _house.unusedCells.filter(function (cell) {
                return _toConsumableArray(cell.possibilities).some(function (v) {
                  return possibleHiddenDigits.indexOf(v) > -1;
                });
              });

              if (possibleSetOfHiddenCells.length === size) {
                if (canExcludeAPossibilty(possibleSetOfHiddenCells, possibleHiddenDigits)) {
                  var id = possibleSetOfHiddenCells.map(function (v) {
                    return v.id;
                  });
                  var digits = possibleHiddenDigits;
                  return {
                    v: {
                      v: {
                        id: id,
                        digits: digits,
                        house: _house,
                        length: size,
                        strategy: _this
                      }
                    }
                  };
                }
              }
            };

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = possibleSetOfHiddenDigits[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var possibleHiddenDigits = _step2.value;

                var _ret2 = _loop2(possibleHiddenDigits);

                if (_typeof(_ret2) === "object") return _ret2.v;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };

      // need at least 3 for 2 unused cells to find a hidden double
      for (var size = 2; size <= 4; size++) {
        var _ret = _loop(size);

        if (_typeof(_ret) === "object") return _ret.v;
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      step.house.cells.filter(function (cell) {
        return step.id.indexOf(cell.id) > -1;
      }).forEach(function (cell) {
        var _cell$impossibilities;

        var impossible = _toConsumableArray(cell.possibilities).filter(function (p) {
          return step.digits.indexOf(p) === -1;
        });

        cell.impossibilities = (_cell$impossibilities = cell.impossibilities).concat.apply(_cell$impossibilities, _toConsumableArray(impossible));
      });
      return true;
    }
  }]);

  return Hidden;
}();

exports.default = Hidden;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Square = __webpack_require__(3);

var _Row = __webpack_require__(0);

var _Column = __webpack_require__(2);

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LockedCandidate =
/*#__PURE__*/
function () {
  function LockedCandidate() {
    _classCallCheck(this, LockedCandidate);

    this.type = "LockedCandidate";
    return this;
  }

  _createClass(LockedCandidate, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      var candidateHouses = grid.house.filter(function (house) {
        return house.unused.size > 0;
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _house = _step.value;

          switch (_house.type) {
            case "row":
            case "column":
              var _loop = function _loop(digit) {
                var possibleCells = _house.cells.filter(function (v) {
                  return v.possibilities.has(digit);
                });

                if (possibleCells.length > 1) {
                  if ((0, _Square.isSquare)(possibleCells)) {
                    var squareID = possibleCells[0].squareID;
                    var total = grid.square[squareID].cells.filter(function (v) {
                      return v.possibilities.has(digit);
                    });

                    if (possibleCells.length < total.length) {
                      var locked = grid.square[squareID];
                      var ids = possibleCells.map(function (v) {
                        return v.id;
                      });
                      return {
                        v: {
                          ids: ids,
                          digit: digit,
                          house: _house,
                          locked: locked,
                          strategy: _this
                        }
                      };
                    }
                  }
                }
              };

              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = _house.unused[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var digit = _step2.value;

                  var _ret = _loop(digit);

                  if (_typeof(_ret) === "object") return _ret.v;
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              break;

            case "square":
              var _loop2 = function _loop2(_digit) {
                var possibleCells = _house.cells.filter(function (v) {
                  return v.possibilities.has(_digit);
                });

                if (possibleCells.length > 1) {
                  if ((0, _Row.isRow)(possibleCells)) {
                    var rowID = possibleCells[0].rowID;
                    var total = grid.row[rowID].cells.filter(function (v) {
                      return v.possibilities.has(_digit);
                    });

                    if (possibleCells.length < total.length) {
                      var locked = grid.row[rowID];
                      var ids = possibleCells.map(function (v) {
                        return v.id;
                      });
                      return {
                        v: {
                          ids: ids,
                          digit: _digit,
                          house: _house,
                          locked: locked,
                          strategy: _this
                        }
                      };
                    }
                  }

                  if ((0, _Column.isColumn)(possibleCells)) {
                    var columnID = possibleCells[0].columnID;

                    var _total = grid.column[columnID].cells.filter(function (v) {
                      return v.possibilities.has(_digit);
                    });

                    if (possibleCells.length < _total.length) {
                      var _locked = grid.column[columnID];

                      var _ids = possibleCells.map(function (v) {
                        return v.id;
                      });

                      return {
                        v: {
                          ids: _ids,
                          digit: _digit,
                          house: _house,
                          locked: _locked,
                          strategy: _this
                        }
                      };
                    }
                  }
                }
              };

              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = _house.unused[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var _digit = _step3.value;

                  var _ret2 = _loop2(_digit);

                  if (_typeof(_ret2) === "object") return _ret2.v;
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      grid[step.locked.type][step.locked.id].cells.filter(function (v) {
        return step.ids.indexOf(v.id) === -1;
      }).filter(function (v) {
        return v.possibilities.has(step.digit);
      }).forEach(function (v) {
        v.addToImpossibilities(step.digit);
      });
      return true;
    }
  }]);

  return LockedCandidate;
}();

exports.default = LockedCandidate;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var makeChainLink = function makeChainLink(grid, node, cells, size) {
  var chain = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var visited = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
  var out = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];

  var processLink = function processLink(node, chain) {
    var excluded = _toConsumableArray(chain[0].cell.canSee).filter(function (v) {
      return node.cell.canSee.has(v);
    }).filter(function (v) {
      return v.possibilities.has(node.mustBe);
    });

    var sameRow = chain[0].cell.rowID === node.cell.rowID;
    var sameColumn = chain[0].cell.columnID === node.cell.columnID;
    var sameSquare = chain[0].cell.squareID === node.cell.squareID;

    if (excluded.length && !sameRow && !sameColumn && !sameSquare) {
      visited.push(node.cell.id);
      out.push(chain);
    }
  };

  var nextLink = function nextLink(house, node) {
    var links = house.links[node.mustBe].filter(function (v) {
      return visited.indexOf(v.id) === -1;
    }).filter(function (v) {
      return v.id !== cell.id;
    });
    var linkCell = grid.cells[links[0].id];

    var mustBe = _toConsumableArray(linkCell.possibilities.values()).filter(function (v) {
      return v !== node.mustBe;
    })[0];

    var cannotBe = _toConsumableArray(linkCell.possibilities.values()).filter(function (v) {
      return v !== mustBe;
    })[0];

    makeChainLink(grid, {
      cell: linkCell,
      mustBe: mustBe,
      cannotBe: cannotBe
    }, cells.filter(function (v) {
      return v.id !== cell.id;
    }), size, chain.slice(0), visited, out);
  };

  var cell = node.cell;
  chain.push(node);

  if (!cells.length || chain.length > size) {
    return;
  }

  if (node.mustBe === chain[0].cannotBe) {
    processLink(node, chain);
  } else {
    // row
    if (grid.row[cell.rowID].links[node.mustBe]) {
      nextLink(grid.row[cell.rowID], node);
    } // column


    if (grid.column[cell.columnID].links[node.mustBe]) {
      nextLink(grid.column[cell.columnID], node);
    } // square


    if (grid.square[cell.squareID].links[node.mustBe]) {
      nextLink(grid.square[cell.squareID], node);
    }
  }

  return out;
};

var XYChain =
/*#__PURE__*/
function () {
  function XYChain() {
    _classCallCheck(this, XYChain);

    this.type = "XYChain";
    return this;
  }

  _createClass(XYChain, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      var candidateHouses = grid.house.filter(function (house) {
        return house.unused.size > 0;
      });

      for (var size = 3; size < 10; size++) {
        var _loop = function _loop(digit) {
          var bivalueCells = grid.cells.filter(function (v) {
            return v.possibilities.size === 2;
          });
          var startCells = bivalueCells.filter(function (v) {
            return v.possibilities.has(digit);
          });

          var _loop2 = function _loop2() {
            var cell = startCells[0];
            startCells = startCells.filter(function (v) {
              return v.id !== cell.id;
            });
            bivalueCells = bivalueCells.filter(function (v) {
              return v.id !== cell.id;
            });

            var mustBe = _toConsumableArray(cell.possibilities).filter(function (v) {
              return v !== digit;
            })[0];

            var node = {
              cell: cell,
              mustBe: mustBe,
              cannotBe: digit
            };
            var chain = makeChainLink(grid, node, bivalueCells.map(function (v) {
              return v.id;
            }), size);

            if (chain && chain.length && chain[0].length) {
              return {
                v: {
                  v: {
                    chain: chain,
                    type: "XYChain",
                    length: chain.length,
                    strategy: _this
                  }
                }
              };
            }
          };

          while (startCells.length) {
            var _ret2 = _loop2();

            if (_typeof(_ret2) === "object") return _ret2.v;
          }
        };

        for (var digit = 1; digit <= 9; digit++) {
          var _ret = _loop(digit);

          if (_typeof(_ret) === "object") return _ret.v;
        }
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      var start = step.chain[0][0];
      var end = step.chain[0][step.chain.length - 1];

      var excluded = _toConsumableArray(start.cell.canSee).filter(function (v) {
        return end.cell.canSee.has(v);
      }).filter(function (v) {
        return v.possibilities.has(start.cannotBe);
      }).forEach(function (v) {
        v.addToImpossibilities(end.mustBe);
      });

      return excluded;
    }
  }]);

  return XYChain;
}();

exports.default = XYChain;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var byDigit = function byDigit(digit) {
  return function (house) {
    return house.cells.filter(function (cell) {
      return cell.possibilities.has(digit);
    }).length >= 2;
  };
};

var linkToColumns = function linkToColumns(digit) {
  return function (row) {
    var columnIDs = row.cells.filter(function (v) {
      return v.possibilities.has(digit);
    }).map(function (v) {
      return v.columnID;
    });
    return {
      rowID: row.id,
      columnIDs: columnIDs
    };
  };
};

var extractUniqueFishColumns = function extractUniqueFishColumns(possibleFishRows, rowsAndThierColumns) {
  var fishColumns = [];

  var _loop = function _loop(i) {
    var row = rowsAndThierColumns.find(function (row) {
      return row.rowID === possibleFishRows[i];
    });
    var columnIDs = row.columnIDs;
    fishColumns.push.apply(fishColumns, _toConsumableArray(columnIDs));
  };

  for (var i = 0; i < possibleFishRows.length; i++) {
    _loop(i);
  }

  return _toConsumableArray(new Set(fishColumns));
};

var canExcludeCellsBasedOnFish = function canExcludeCellsBasedOnFish(grid, digit, fishRows, fishColumns) {
  var cellsToExclude = grid.cells.filter(function (v) {
    return v.possibilities.has(digit);
  }).filter(function (v) {
    return fishRows.indexOf(v.rowID) === -1;
  }).filter(function (v) {
    return fishColumns.indexOf(v.columnID) > -1;
  });
  return cellsToExclude.length;
};

var combinations = function combinations(str, length) {
  var fn = function fn(rest, length) {
    var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    if (!active.length && !rest.length) {
      return;
    }

    if (!rest.length) {
      if (active.length === length) {
        out.push(active);
      }
    } else {
      fn(rest.slice(1), length, active.concat(rest[0]), out);
      fn(rest.slice(1), length, active, out);
    }

    return out;
  };

  return fn(str, length);
};

var Fish =
/*#__PURE__*/
function () {
  function Fish() {
    _classCallCheck(this, Fish);

    this.type = "Fish";
    return this;
  }

  _createClass(Fish, [{
    key: "find",
    value: function find(grid) {
      for (var digit = 1; digit <= 9; digit++) {
        var rowsWithDigitTwice = grid.row.filter(byDigit(digit));

        if (rowsWithDigitTwice.length) {
          var rowsAndThierColumns = rowsWithDigitTwice.map(linkToColumns(digit)).filter(function (v) {
            return v.columnIDs.length >= 2;
          }); // 2 == XY-Wing
          // 3 == swordfish
          // 4 == jellyfish

          for (var size = 2; size <= 4; size++) {
            var rowIDs = rowsAndThierColumns.map(function (row) {
              return row.rowID;
            }); // all possible rowID combinations (where row contains digit) of required size

            var possibleSetOfFishRowCombinations = combinations(rowIDs, size);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = possibleSetOfFishRowCombinations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _possibleFishRows = _step.value;
                var fishColumns = extractUniqueFishColumns(_possibleFishRows, rowsAndThierColumns); // fishColumns and possibleSetOfFishRows are both equal to size required, so we have a fish

                if (fishColumns.length === size) {
                  var fishRows = _possibleFishRows; // dont return unless it progresses grid solving

                  if (canExcludeCellsBasedOnFish(grid, digit, fishRows, fishColumns)) {
                    return {
                      digit: digit,
                      rows: fishRows,
                      columns: fishColumns,
                      length: fishRows.length,
                      strategy: this
                    };
                  }
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        }
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      grid.cells.filter(function (v) {
        return v.possibilities.has(step.digit);
      }).filter(function (v) {
        return step.rows.indexOf(v.rowID) === -1;
      }).filter(function (v) {
        return step.columns.indexOf(v.columnID) > -1;
      }).forEach(function (v) {
        v.addToImpossibilities(step.digit);
      });
      return true;
    }
  }]);

  return Fish;
}();

exports.default = Fish;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(11);
__webpack_require__(7);
__webpack_require__(6);
__webpack_require__(9);
__webpack_require__(8);
__webpack_require__(3);
__webpack_require__(0);
__webpack_require__(2);
__webpack_require__(5);
__webpack_require__(17);
__webpack_require__(19);
module.exports = __webpack_require__(20);


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Solver", {
  enumerable: true,
  get: function get() {
    return _Solver.default;
  }
});
Object.defineProperty(exports, "isValid", {
  enumerable: true,
  get: function get() {
    return _isValid.default;
  }
});

var _Solver = _interopRequireDefault(__webpack_require__(4));

var _isValid = _interopRequireDefault(__webpack_require__(16));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Cell = _interopRequireDefault(__webpack_require__(5));

var _Row = _interopRequireDefault(__webpack_require__(0));

var _Column = _interopRequireDefault(__webpack_require__(2));

var _Square = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Grid =
/*#__PURE__*/
function () {
  function Grid(text) {
    var _house;

    _classCallCheck(this, Grid);

    this.cells = this.textToCells(text);
    this.square = [];
    this.row = [];
    this.column = [];
    this.house = [];

    for (var i = 0; i < 9; i++) {
      this.row.push(new _Row.default(i, this.getRow(i), this));
      this.column.push(new _Column.default(i, this.getColumn(i), this));
      this.square.push(new _Square.default(i, this.getSquare(i), this));
    }

    (_house = this.house).push.apply(_house, _toConsumableArray(this.row).concat(_toConsumableArray(this.column), _toConsumableArray(this.square)));
  }

  _createClass(Grid, [{
    key: "textToCells",
    value: function textToCells(text) {
      var cells = [];
      var rows = text.match(/.{1,9}/g);
      var digitArray = [];

      for (var i = 0; i < 9; i++) {
        digitArray[i] = rows[i].split("").map(Number);
      }

      for (var r = 0; r < 9; r++) {
        for (var c = 0; c < 9; c++) {
          var locked = !!digitArray[r][c];
          cells.push(new _Cell.default(this, r, c, digitArray[r][c], locked));
        }
      }

      return cells;
    }
  }, {
    key: "getSquare",
    value: function getSquare(id) {
      return this.cells.filter(function (v) {
        return v.squareID === id;
      });
    }
  }, {
    key: "getRow",
    value: function getRow(id) {
      return this.cells.filter(function (v) {
        return v.rowID === id;
      });
    }
  }, {
    key: "getColumn",
    value: function getColumn(id) {
      return this.cells.filter(function (v) {
        return v.columnID === id;
      });
    }
  }]);

  return Grid;
}();

exports.default = Grid;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var usedBy = function usedBy(cell, grid) {
  var used = []; // all used found in one house

  var _arr = ["row", "column", "square"];

  for (var _i = 0; _i < _arr.length; _i++) {
    var houseType = _arr[_i];
    var houseID = cell[houseType + "ID"];
    var houseCells = grid[houseType][houseID].cells;

    if (houseCells.filter(function (v) {
      return v.digit > 0;
    }).length === 8) {
      used = houseCells.filter(function (v) {
        return v.digit > 0;
      }).map(function (v) {
        return v.id;
      });
      return used;
    }
  } // used found in different houses


  var cells = _toConsumableArray(cell.canSee);

  var _loop = function _loop(i) {
    var seenBy = cells.filter(function (v) {
      return v.digit === i;
    }).map(function (v) {
      return v.id;
    }).map(Number)[0];

    if (!isNaN(seenBy)) {
      used.push(seenBy);
    }
  };

  for (var i = 1; i <= 9; i++) {
    _loop(i);
  }

  return used;
};

var NakedSingle =
/*#__PURE__*/
function () {
  function NakedSingle() {
    _classCallCheck(this, NakedSingle);

    this.type = "NakedSingle";
    return this;
  }

  _createClass(NakedSingle, [{
    key: "find",
    value: function find(grid) {
      var candidateCells = grid.cells.filter(function (cell) {
        return cell.possibilities.size === 1;
      });

      if (candidateCells.length) {
        var cell = candidateCells[0];
        var digit = cell.possibilities.values().next().value;
        var used = usedBy(cell, grid);
        return {
          id: cell.id,
          digit: digit,
          used: used,
          strategy: this
        };
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      grid.cells[step.id].digit = step.digit;
    }
  }]);

  return NakedSingle;
}();

exports.default = NakedSingle;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HiddenSingle =
/*#__PURE__*/
function () {
  function HiddenSingle() {
    _classCallCheck(this, HiddenSingle);

    this.type = "HiddenSingle";
    return this;
  }

  _createClass(HiddenSingle, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      // house must have at least 2 empty cells to be hidden single
      var candidateHouses = grid.house.filter(function (house) {
        return house.unused.size > 1;
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _house = _step.value;

          var _loop = function _loop(digit) {
            var possibleCells = _house.cells.filter(function (v) {
              return v.possibilities.has(digit);
            });

            if (possibleCells.length === 1) {
              return {
                v: {
                  id: possibleCells[0].id,
                  digit: digit,
                  house: _house,
                  strategy: _this
                }
              };
            }
          };

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _house.unused.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var digit = _step2.value;

              var _ret = _loop(digit);

              if (_typeof(_ret) === "object") return _ret.v;
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      grid.cells[step.id].digit = step.digit;
    }
  }]);

  return HiddenSingle;
}();

exports.default = HiddenSingle;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var cellsAffected = function cellsAffected(house, id, digits) {
  var cells = house.cells.filter(function (cell) {
    return id.indexOf(cell.id) === -1;
  }).filter(function (cell) {
    return _toConsumableArray(cell.possibilities).some(function (p) {
      return digits.indexOf(p) > -1;
    });
  });
  return cells;
};

var canExcludeAPossibilty = function canExcludeAPossibilty(house, id, digits) {
  return !!cellsAffected(house, id, digits).length;
};

var Naked =
/*#__PURE__*/
function () {
  function Naked() {
    _classCallCheck(this, Naked);

    this.type = "Naked";
    return this;
  }

  _createClass(Naked, [{
    key: "find",
    value: function find(grid) {
      var _this = this;

      var candidateHouses;

      var _loop = function _loop(size) {
        candidateHouses = grid.house.filter(function (house) {
          return house.unused.size > size;
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _house = _step.value;

            var possibleSetOfNakedDigits = _house.cells.filter(function (cell) {
              return cell.possibilities.size <= size;
            }).map(function (cell) {
              return _toConsumableArray(cell.possibilities);
            });

            var _loop2 = function _loop2(possibleNakedDigits) {
              var possibleSetOfNakedCells = _house.unusedCells.filter(function (cell) {
                return _toConsumableArray(cell.possibilities).every(function (v) {
                  return possibleNakedDigits.indexOf(v) > -1;
                });
              });

              if (possibleSetOfNakedCells.length === size) {
                var id = possibleSetOfNakedCells.map(function (v) {
                  return v.id;
                });
                var digits = possibleNakedDigits;

                if (canExcludeAPossibilty(_house, id, digits)) {
                  return {
                    v: {
                      v: {
                        id: id,
                        digits: digits,
                        house: _house,
                        length: size,
                        strategy: _this
                      }
                    }
                  };
                }
              }
            };

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = possibleSetOfNakedDigits[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var possibleNakedDigits = _step2.value;

                var _ret2 = _loop2(possibleNakedDigits);

                if (_typeof(_ret2) === "object") return _ret2.v;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };

      for (var size = 2; size <= 4; size++) {
        var _ret = _loop(size);

        if (_typeof(_ret) === "object") return _ret.v;
      }

      return undefined;
    }
  }, {
    key: "apply",
    value: function apply(grid, step) {
      cellsAffected(step.house, step.id, step.digits).forEach(function (v) {
        v.impossibilities = v.impossibilities.concat(step.digits);
      });
      return true;
    }
  }]);

  return Naked;
}();

exports.default = Naked;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isValid;

var _Solver = _interopRequireDefault(__webpack_require__(4));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isValid(text) {
  function hasDuplicates(a) {
    return a.length - new Set(a).size;
  }

  var rows = text.match(/.{1,9}/g);
  var grid = {};
  grid.row = [];
  grid.column = [];
  grid.square = [];

  for (var i = 0; i < 9; i++) {
    grid.row[i] = [];
    grid.column[i] = [];
    grid.square[i] = [];
  }

  if (rows.length !== 9) {
    return {
      isValid: false,
      message: "Grid does not contain 9 rows"
    };
  }

  var row = [];

  for (var rowID = 0; rowID < 9; rowID++) {
    row = rows[rowID].split("");

    if (row.length !== 9) {
      return {
        isValid: false,
        message: "Grid does not contain 9 numbers in row"
      };
    }

    row = row.map(Number).filter(function (v) {
      return !isNaN(v);
    });

    if (row.length !== 9) {
      return {
        isValid: false,
        message: "Grid contains non numeric values"
      };
    }

    grid.row[rowID] = row;

    for (var columnID = 0; columnID < 9; columnID++) {
      var squareID = Math.floor(rowID / 3) * 3 + Math.floor(columnID / 3);
      grid.column[columnID].push(row[columnID]);
      grid.square[squareID].push(row[columnID]);
    }
  }

  var _arr = ["row", "column", "square"];

  for (var _i = 0; _i < _arr.length; _i++) {
    var house = _arr[_i];
    var nonZeroTotal = 0;

    for (var _i2 = 0; _i2 < 9; _i2++) {
      var nonZeroValues = grid[house][_i2].filter(function (v) {
        return v !== 0;
      });

      if (nonZeroValues.length) {
        nonZeroTotal = nonZeroTotal + nonZeroValues.length;

        if (hasDuplicates(nonZeroValues)) {
          return {
            isValid: false,
            message: "Grid contains duplicates in ".concat(house, " ").concat(_i2 + 1)
          };
        }
      }
    }

    if (nonZeroTotal < 17) {
      return {
        isValid: false,
        message: "Grid contains less than 17 digits"
      };
    }
  }

  var solver = new _Solver.default(text).solve();

  if (solver.isSolved()) {
    return {
      isValid: true,
      message: "Grid can be solved"
    };
  }

  return {
    isValid: false,
    message: "Grid can not be solved by this tool"
  };
}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? "undefined" : _typeof2(exports)) === "object" && ( false ? "undefined" : _typeof2(module)) === "object") module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === "undefined" ? "undefined" : _typeof2(exports)) === "object") exports["Sudoku"] = factory();else root["Sudoku"] = factory();
})(undefined, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {}; // The require function

      /******/

      /******/

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        } // Create a new module (and put it into the cache)

        /******/

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        }; // Execute the module function

        /******/

        /******/

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); // Flag the module as loaded

        /******/

        /******/

        /******/

        module.l = true; // Return the exports of the module

        /******/

        /******/

        /******/

        return module.exports;
        /******/
      } // expose the modules object (__webpack_modules__)

      /******/

      /******/

      /******/

      /******/


      __webpack_require__.m = modules; // expose the module cache

      /******/

      /******/

      /******/

      __webpack_require__.c = installedModules; // define getter function for harmony exports

      /******/

      /******/

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      }; // getDefaultExport function for compatibility with non-harmony modules

      /******/

      /******/

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module["default"];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, "a", getter);
        /******/


        return getter;
        /******/
      }; // Object.prototype.hasOwnProperty.call

      /******/

      /******/

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      }; // __webpack_public_path__

      /******/

      /******/

      /******/


      __webpack_require__.p = ""; // Load entry module and return exports

      /******/

      /******/

      /******/

      return __webpack_require__(__webpack_require__.s = 6);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var House =
      /*#__PURE__*/
      function () {
        function House(id, cells, grid) {
          _classCallCheck(this, House);

          this.id = id;
          this.cells = cells;
          this.grid = grid;
          return this;
        }

        _createClass(House, [{
          key: "isSolved",
          get: function get() {
            return this.usedCells.length === 9;
          }
        }, {
          key: "unused",
          get: function get() {
            var _this = this;

            var fullSet = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            return new Set(fullSet.filter(function (x) {
              return !_this.used.has(x);
            }));
          }
        }, {
          key: "used",
          get: function get() {
            return new Set(this.usedCells.map(function (cell) {
              return cell.digit;
            }));
          }
        }, {
          key: "usedCells",
          get: function get() {
            return this.cells.filter(function (v) {
              return v.digit !== 0;
            });
          }
        }, {
          key: "unusedCells",
          get: function get() {
            return this.cells.filter(function (v) {
              return v.digit === 0;
            });
          }
        }, {
          key: "links",
          get: function get() {
            var _this2 = this;

            var links = {};

            var _loop = function _loop(digit) {
              var digitLinks = _this2.cells.filter(function (v) {
                return v.possibilities.has(digit) && v.possibilities.size === 2;
              }).map(function (v) {
                return {
                  id: v.id,
                  possibilities: v.possibilities
                };
              });

              if (digitLinks.length > 1) {
                links[digit] = digitLinks;
              }
            };

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = this.unused[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var digit = _step.value;

                _loop(digit);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return links;
          }
        }]);

        return House;
      }();

      exports.default = House;
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var _Grid = _interopRequireDefault(__webpack_require__(8));

      var _nakedSingle = _interopRequireDefault(__webpack_require__(9));

      var _hiddenSingle = _interopRequireDefault(__webpack_require__(10));

      var _naked = _interopRequireDefault(__webpack_require__(11));

      var _hidden = _interopRequireDefault(__webpack_require__(12));

      var _lockedCandidate = _interopRequireDefault(__webpack_require__(13));

      var _XYChain = _interopRequireDefault(__webpack_require__(14));

      var _fish = _interopRequireDefault(__webpack_require__(15));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var ns = new _nakedSingle.default();
      var hs = new _hiddenSingle.default();
      var n = new _naked.default();
      var h = new _hidden.default();
      var lc = new _lockedCandidate.default();
      var f = new _fish.default();
      var xy = new _XYChain.default();
      var strategies = [ns, hs, n, h, lc, f, xy];

      var Solver =
      /*#__PURE__*/
      function () {
        function Solver(text) {
          _classCallCheck(this, Solver);

          this.grid = new _Grid.default(text);
          return this;
        }

        _createClass(Solver, [{
          key: "isSolved",
          value: function isSolved() {
            var isSolved = true;

            for (var i = 0; i < 9; i++) {
              if (this.grid.row[i].isSolved === false) {
                isSolved = false;
              }
            }

            return isSolved;
          }
        }, {
          key: "next",
          value: function next() {
            var next;

            for (var i in strategies) {
              next = strategies[i].find(this.grid);

              if (next) {
                return next;
              }
            }
          }
        }, {
          key: "solve",
          value: function solve() {
            var i = 1;
            var nextStep = this.next();

            while (!this.isSolved() && nextStep) {
              this.apply(nextStep);
              nextStep = this.next();
              i = i + 1;
            }

            return this;
          }
        }, {
          key: "apply",
          value: function apply(step) {
            step.strategy.apply(this.grid, step);
            return;
          }
        }, {
          key: "firstRow",
          value: function firstRow() {
            return this.grid.row[0].cells.map(function (v) {
              return v.digit;
            });
          }
        }]);

        return Solver;
      }();

      exports.default = Solver;
      /***/
    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var Cell =
      /*#__PURE__*/
      function () {
        function Cell(grid, row, column, digit, locked) {
          _classCallCheck(this, Cell);

          this.id = row * 9 + column;
          this.grid = grid;
          this.rowID = row;
          this.columnID = column;
          this.locked = locked;
          this.squareID = Math.floor(row / 3) * 3 + Math.floor(column / 3);
          this.impossibilities = [];
          this._digit = digit;
          this.row = "R".concat(this.rowID + 1);
          this.column = "C".concat(this.columnID + 1);
          this.square = "S".concat(this.squareID + 1);
          return this;
        }

        _createClass(Cell, [{
          key: "getPossibilities",
          value: function getPossibilities() {
            if (this.digit) {
              return new Set();
            }

            var possibles = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);

            for (var i = 0; i < this.impossibilities.length; i++) {
              possibles.delete(this.impossibilities[i]);
            }

            var s = this.grid.square[this.squareID].cells.map(function (v) {
              return v.digit;
            }).filter(function (v) {
              return v !== 0;
            });
            var r = this.grid.row[this.rowID].cells.map(function (v) {
              return v.digit;
            }).filter(function (v) {
              return v !== 0;
            });
            var c = this.grid.column[this.columnID].cells.map(function (v) {
              return v.digit;
            }).filter(function (v) {
              return v !== 0;
            });
            var used = new Set(r.concat(c).concat(s));
            return new Set(_toConsumableArray(possibles).filter(function (v) {
              return !used.has(v);
            }));
          }
        }, {
          key: "addToImpossibilities",
          value: function addToImpossibilities(digit) {
            this.impossibilities.push(digit);
            return this.impossibilities;
          }
        }, {
          key: "digit",
          get: function get() {
            return this._digit;
          },
          set: function set(digit) {
            var _this = this;

            this.grid.row[this.rowID].used.add(digit);
            this.grid.row[this.rowID].unused.delete(digit);
            this.grid.column[this.columnID].used.add(digit);
            this.grid.column[this.columnID].unused.delete(digit);
            this.grid.square[this.squareID].used.add(digit);
            this.grid.square[this.squareID].unused.delete(digit);
            this.grid.row[this.rowID].cells.filter(function (v) {
              return v.id !== _this.id;
            }).forEach(function (v) {
              return v.impossibilities.concat(digit);
            });
            this.grid.column[this.columnID].cells.filter(function (v) {
              return v.id !== _this.id;
            }).forEach(function (v) {
              return v.impossibilities.concat(digit);
            });
            this.grid.square[this.squareID].cells.filter(function (v) {
              return v.id !== _this.id;
            }).forEach(function (v) {
              return v.impossibilities.concat(digit);
            });
            this._digit = digit;
          } // get excluded() {
          //     return [1, 2, 3, 4, 5, 6, 7, 8, 9]
          //         //.filter(v => [...this.impossibilities].indexOf(v) > -1)
          //         .filter(v => [...this.possibilities].indexOf(v) === -1);
          // }

        }, {
          key: "possibilities",
          get: function get() {
            return this.getPossibilities();
          }
        }, {
          key: "canSee",
          get: function get() {
            var s = this.grid.square[this.squareID].cells;
            var r = this.grid.row[this.rowID].cells;
            var c = this.grid.column[this.columnID].cells;
            return new Set(r.concat(c).concat(s));
          }
        }]);

        return Cell;
      }();

      exports.default = Cell;
      /***/
    },
    /* 3 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isRow = isRow;
      exports.default = void 0;

      var _House2 = _interopRequireDefault(__webpack_require__(0));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }

      var Row =
      /*#__PURE__*/
      function (_House) {
        _inherits(Row, _House);

        function Row(id, cells, grid) {
          var _this;

          _classCallCheck(this, Row);

          _this = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, id, cells, grid));
          _this.type = "row";
          return _possibleConstructorReturn(_this, _this);
        }

        return Row;
      }(_House2.default);

      exports.default = Row;

      function isRow(cells) {
        // if (!cells.length) {
        //     return false;
        // }
        return cells.every(function (v, i, a) {
          return v.rowID === a[0].rowID;
        });
      }
      /***/

    },
    /* 4 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isColumn = isColumn;
      exports.default = void 0;

      var _House2 = _interopRequireDefault(__webpack_require__(0));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }

      var Column =
      /*#__PURE__*/
      function (_House) {
        _inherits(Column, _House);

        function Column(id, cells, grid) {
          var _this;

          _classCallCheck(this, Column);

          _this = _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).call(this, id, cells, grid));
          _this.type = "column";
          return _possibleConstructorReturn(_this, _this);
        }

        return Column;
      }(_House2.default);

      exports.default = Column;

      function isColumn(cells) {
        // if (!cells.length) {
        //     return false;
        // }
        return cells.every(function (v, i, a) {
          return v.columnID === a[0].columnID;
        });
      }
      /***/

    },
    /* 5 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isSquare = isSquare;
      exports.default = void 0;

      var _House2 = _interopRequireDefault(__webpack_require__(0));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }

      var Square =
      /*#__PURE__*/
      function (_House) {
        _inherits(Square, _House);

        function Square(id, cells, grid) {
          var _this;

          _classCallCheck(this, Square);

          _this = _possibleConstructorReturn(this, (Square.__proto__ || Object.getPrototypeOf(Square)).call(this, id, cells, grid));
          _this.type = "square";
          return _possibleConstructorReturn(_this, _this);
        }

        return Square;
      }(_House2.default);

      exports.default = Square;

      function isSquare(cells) {
        // if (!cells.length) {
        //     return false;
        // }
        return cells.every(function (v, i, a) {
          return v.squareID === a[0].squareID;
        });
      }
      /***/

    },
    /* 6 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(7);

      module.exports = __webpack_require__(2);
      /***/
    },
    /* 7 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "Solver", {
        enumerable: true,
        get: function get() {
          return _Solver.default;
        }
      });
      Object.defineProperty(exports, "isValid", {
        enumerable: true,
        get: function get() {
          return _isValid.default;
        }
      });

      var _Solver = _interopRequireDefault(__webpack_require__(1));

      var _isValid = _interopRequireDefault(__webpack_require__(16));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      /***/

    },
    /* 8 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var _Cell = _interopRequireDefault(__webpack_require__(2));

      var _Row = _interopRequireDefault(__webpack_require__(3));

      var _Column = _interopRequireDefault(__webpack_require__(4));

      var _Square = _interopRequireDefault(__webpack_require__(5));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var Grid =
      /*#__PURE__*/
      function () {
        function Grid(text) {
          var _house;

          _classCallCheck(this, Grid);

          this.cells = this.textToCells(text);
          this.square = [];
          this.row = [];
          this.column = [];
          this.house = [];

          for (var i = 0; i < 9; i++) {
            this.row.push(new _Row.default(i, this.getRow(i), this));
            this.column.push(new _Column.default(i, this.getColumn(i), this));
            this.square.push(new _Square.default(i, this.getSquare(i), this));
          }

          (_house = this.house).push.apply(_house, _toConsumableArray(this.row).concat(_toConsumableArray(this.column), _toConsumableArray(this.square)));
        }

        _createClass(Grid, [{
          key: "textToCells",
          value: function textToCells(text) {
            var cells = [];
            var rows = text.match(/.{1,9}/g);
            var digitArray = [];

            for (var i = 0; i < 9; i++) {
              digitArray[i] = rows[i].split("").map(Number);
            }

            for (var r = 0; r < 9; r++) {
              for (var c = 0; c < 9; c++) {
                var locked = !!digitArray[r][c];
                cells.push(new _Cell.default(this, r, c, digitArray[r][c], locked));
              }
            }

            return cells;
          }
        }, {
          key: "getSquare",
          value: function getSquare(id) {
            return this.cells.filter(function (v) {
              return v.squareID === id;
            });
          }
        }, {
          key: "getRow",
          value: function getRow(id) {
            return this.cells.filter(function (v) {
              return v.rowID === id;
            });
          }
        }, {
          key: "getColumn",
          value: function getColumn(id) {
            return this.cells.filter(function (v) {
              return v.columnID === id;
            });
          }
        }]);

        return Grid;
      }();

      exports.default = Grid;
      /***/
    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      var usedBy = function usedBy(cell, grid) {
        var used = []; // all used found in one house

        var _arr = ["row", "column", "square"];

        for (var _i = 0; _i < _arr.length; _i++) {
          var houseType = _arr[_i];
          var houseID = cell[houseType + "ID"];
          var houseCells = grid[houseType][houseID].cells;

          if (houseCells.filter(function (v) {
            return v.digit > 0;
          }).length === 8) {
            used = houseCells.filter(function (v) {
              return v.digit > 0;
            }).map(function (v) {
              return v.id;
            });
            return used;
          }
        } // used found in different houses


        var cells = _toConsumableArray(cell.canSee);

        var _loop = function _loop(i) {
          var seenBy = cells.filter(function (v) {
            return v.digit === i;
          }).map(function (v) {
            return v.id;
          }).map(Number)[0];

          if (!isNaN(seenBy)) {
            used.push(seenBy);
          }
        };

        for (var i = 1; i <= 9; i++) {
          _loop(i);
        }

        return used;
      };

      var NakedSingle =
      /*#__PURE__*/
      function () {
        function NakedSingle() {
          _classCallCheck(this, NakedSingle);

          this.type = "NakedSingle";
          return this;
        }

        _createClass(NakedSingle, [{
          key: "find",
          value: function find(grid) {
            var candidateCells = grid.cells.filter(function (cell) {
              return cell.possibilities.size === 1;
            });

            if (candidateCells.length) {
              var cell = candidateCells[0];
              var digit = cell.possibilities.values().next().value;
              var used = usedBy(cell, grid);
              return {
                id: cell.id,
                digit: digit,
                used: used,
                strategy: this
              };
            }

            return undefined;
          }
        }, {
          key: "apply",
          value: function apply(grid, step) {
            grid.cells[step.id].digit = step.digit;
          }
        }]);

        return NakedSingle;
      }();

      exports.default = NakedSingle;
      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var HiddenSingle =
      /*#__PURE__*/
      function () {
        function HiddenSingle() {
          _classCallCheck(this, HiddenSingle);

          this.type = "HiddenSingle";
          return this;
        }

        _createClass(HiddenSingle, [{
          key: "find",
          value: function find(grid) {
            var _this = this; // house must have at least 2 empty cells to be hidden single


            var candidateHouses = grid.house.filter(function (house) {
              return house.unused.size > 1;
            });
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _house = _step.value;

                var _loop = function _loop(digit) {
                  var possibleCells = _house.cells.filter(function (v) {
                    return v.possibilities.has(digit);
                  });

                  if (possibleCells.length === 1) {
                    return {
                      v: {
                        id: possibleCells[0].id,
                        digit: digit,
                        house: _house,
                        strategy: _this
                      }
                    };
                  }
                };

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = _house.unused.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var digit = _step2.value;

                    var _ret = _loop(digit);

                    if (_typeof(_ret) === "object") return _ret.v;
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return undefined;
          }
        }, {
          key: "apply",
          value: function apply(grid, step) {
            grid.cells[step.id].digit = step.digit;
          }
        }]);

        return HiddenSingle;
      }();

      exports.default = HiddenSingle;
      /***/
    },
    /* 11 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      var cellsAffected = function cellsAffected(house, id, digits) {
        var cells = house.cells.filter(function (cell) {
          return id.indexOf(cell.id) === -1;
        }).filter(function (cell) {
          return _toConsumableArray(cell.possibilities).some(function (p) {
            return digits.indexOf(p) > -1;
          });
        });
        return cells;
      };

      var canExcludeAPossibilty = function canExcludeAPossibilty(house, id, digits) {
        return !!cellsAffected(house, id, digits).length;
      };

      var Naked =
      /*#__PURE__*/
      function () {
        function Naked() {
          _classCallCheck(this, Naked);

          this.type = "Naked";
          return this;
        }

        _createClass(Naked, [{
          key: "find",
          value: function find(grid) {
            var _this = this;

            var candidateHouses;

            var _loop = function _loop(size) {
              candidateHouses = grid.house.filter(function (house) {
                return house.unused.size > size;
              });
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var _house = _step.value;

                  var possibleSetOfNakedDigits = _house.cells.filter(function (cell) {
                    return cell.possibilities.size <= size;
                  }).map(function (cell) {
                    return _toConsumableArray(cell.possibilities);
                  });

                  var _loop2 = function _loop2(possibleNakedDigits) {
                    var possibleSetOfNakedCells = _house.unusedCells.filter(function (cell) {
                      return _toConsumableArray(cell.possibilities).every(function (v) {
                        return possibleNakedDigits.indexOf(v) > -1;
                      });
                    });

                    if (possibleSetOfNakedCells.length === size) {
                      var id = possibleSetOfNakedCells.map(function (v) {
                        return v.id;
                      });
                      var digits = possibleNakedDigits;

                      if (canExcludeAPossibilty(_house, id, digits)) {
                        return {
                          v: {
                            v: {
                              id: id,
                              digits: digits,
                              house: _house,
                              length: size,
                              strategy: _this
                            }
                          }
                        };
                      }
                    }
                  };

                  var _iteratorNormalCompletion2 = true;
                  var _didIteratorError2 = false;
                  var _iteratorError2 = undefined;

                  try {
                    for (var _iterator2 = possibleSetOfNakedDigits[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                      var possibleNakedDigits = _step2.value;

                      var _ret2 = _loop2(possibleNakedDigits);

                      if (_typeof(_ret2) === "object") return _ret2.v;
                    }
                  } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                      }
                    } finally {
                      if (_didIteratorError2) {
                        throw _iteratorError2;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            };

            for (var size = 2; size <= 4; size++) {
              var _ret = _loop(size);

              if (_typeof(_ret) === "object") return _ret.v;
            }

            return undefined;
          }
        }, {
          key: "apply",
          value: function apply(grid, step) {
            cellsAffected(step.house, step.id, step.digits).forEach(function (v) {
              v.impossibilities = v.impossibilities.concat(step.digits);
            });
            return true;
          }
        }]);

        return Naked;
      }();

      exports.default = Naked;
      /***/
    },
    /* 12 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var canExcludeAPossibilty = function canExcludeAPossibilty(hiddenCellSet, hiddenDigitSet) {
        var cells = hiddenCellSet.filter(function (cell) {
          return cell.possibilities.size > hiddenDigitSet.length;
        });
        return !!cells.length;
      };

      var combinations = function combinations(str, length) {
        var fn = function fn(rest, length) {
          var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

          if (!active.length && !rest.length) {
            return;
          }

          if (!rest.length) {
            if (active.length === length) {
              out.push(active);
            }
          } else {
            fn(rest.slice(1), length, active.concat(rest[0]), out);
            fn(rest.slice(1), length, active, out);
          }

          return out;
        };

        return fn(str, length);
      };

      var compare = function compare(a, b) {
        return a.length === b.length && a.every(function (v, i) {
          return v === b[i];
        });
      };

      var Hidden =
      /*#__PURE__*/
      function () {
        function Hidden() {
          _classCallCheck(this, Hidden);

          this.type = "Hidden";
          return this;
        }

        _createClass(Hidden, [{
          key: "find",
          value: function find(grid) {
            var _this = this;

            var _loop = function _loop(size) {
              var candidateHouses = grid.house.filter(function (house) {
                return house.unused.size >= size + (size - 1);
              });
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var _house = _step.value;
                  var possibleSetOfHiddenDigits = combinations(_toConsumableArray(_house.unused), size);

                  var _loop2 = function _loop2(possibleHiddenDigits) {
                    var possibleSetOfHiddenCells = _house.unusedCells.filter(function (cell) {
                      return _toConsumableArray(cell.possibilities).some(function (v) {
                        return possibleHiddenDigits.indexOf(v) > -1;
                      });
                    });

                    if (possibleSetOfHiddenCells.length === size) {
                      if (canExcludeAPossibilty(possibleSetOfHiddenCells, possibleHiddenDigits)) {
                        var id = possibleSetOfHiddenCells.map(function (v) {
                          return v.id;
                        });
                        var digits = possibleHiddenDigits;
                        return {
                          v: {
                            v: {
                              id: id,
                              digits: digits,
                              house: _house,
                              length: size,
                              strategy: _this
                            }
                          }
                        };
                      }
                    }
                  };

                  var _iteratorNormalCompletion2 = true;
                  var _didIteratorError2 = false;
                  var _iteratorError2 = undefined;

                  try {
                    for (var _iterator2 = possibleSetOfHiddenDigits[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                      var possibleHiddenDigits = _step2.value;

                      var _ret2 = _loop2(possibleHiddenDigits);

                      if (_typeof(_ret2) === "object") return _ret2.v;
                    }
                  } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                      }
                    } finally {
                      if (_didIteratorError2) {
                        throw _iteratorError2;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }; // need at least 3 for 2 unused cells to find a hidden double


            for (var size = 2; size <= 4; size++) {
              var _ret = _loop(size);

              if (_typeof(_ret) === "object") return _ret.v;
            }

            return undefined;
          }
        }, {
          key: "apply",
          value: function apply(grid, step) {
            step.house.cells.filter(function (cell) {
              return step.id.indexOf(cell.id) > -1;
            }).forEach(function (cell) {
              var _cell$impossibilities;

              var impossible = _toConsumableArray(cell.possibilities).filter(function (p) {
                return step.digits.indexOf(p) === -1;
              });

              cell.impossibilities = (_cell$impossibilities = cell.impossibilities).concat.apply(_cell$impossibilities, _toConsumableArray(impossible));
            });
            return true;
          }
        }]);

        return Hidden;
      }();

      exports.default = Hidden;
      /***/
    },
    /* 13 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var _Square = __webpack_require__(5);

      var _Row = __webpack_require__(3);

      var _Column = __webpack_require__(4);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var cellIsNotInArray = function cellIsNotInArray(cell, array) {
        return array.indexOf(cell.id) === -1;
      };

      var LockedCandidate =
      /*#__PURE__*/
      function () {
        function LockedCandidate() {
          _classCallCheck(this, LockedCandidate);

          this.type = "LockedCandidate";
          return this;
        }

        _createClass(LockedCandidate, [{
          key: "find",
          value: function find(grid) {
            var _this = this;

            var candidateHouses = grid.house.filter(function (house) {
              return house.unused.size > 0;
            });
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = candidateHouses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _house = _step.value;

                switch (_house.type) {
                  case "row":
                  case "column":
                    var _loop = function _loop(digit) {
                      var possibleCells = _house.cells.filter(function (v) {
                        return v.possibilities.has(digit);
                      });

                      if (possibleCells.length > 1) {
                        if ((0, _Square.isSquare)(possibleCells)) {
                          var squareID = possibleCells[0].squareID;
                          var total = grid.square[squareID].cells.filter(function (v) {
                            return v.possibilities.has(digit);
                          });

                          if (possibleCells.length < total.length) {
                            var locked = grid.square[squareID];
                            var ids = possibleCells.map(function (v) {
                              return v.id;
                            });
                            return {
                              v: {
                                ids: ids,
                                digit: digit,
                                house: _house,
                                locked: locked,
                                strategy: _this
                              }
                            };
                          }
                        }
                      }
                    };

                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                      for (var _iterator2 = _house.unused[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var digit = _step2.value;

                        var _ret = _loop(digit);

                        if (_typeof(_ret) === "object") return _ret.v;
                      }
                    } catch (err) {
                      _didIteratorError2 = true;
                      _iteratorError2 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                          _iterator2.return();
                        }
                      } finally {
                        if (_didIteratorError2) {
                          throw _iteratorError2;
                        }
                      }
                    }

                    break;

                  case "square":
                    var _loop2 = function _loop2(_digit) {
                      var possibleCells = _house.cells.filter(function (v) {
                        return v.possibilities.has(_digit);
                      });

                      if (possibleCells.length > 1) {
                        if ((0, _Row.isRow)(possibleCells)) {
                          var rowID = possibleCells[0].rowID;
                          var total = grid.row[rowID].cells.filter(function (v) {
                            return v.possibilities.has(_digit);
                          });

                          if (possibleCells.length < total.length) {
                            var locked = grid.row[rowID];
                            var ids = possibleCells.map(function (v) {
                              return v.id;
                            });
                            return {
                              v: {
                                ids: ids,
                                digit: _digit,
                                house: _house,
                                locked: locked,
                                strategy: _this
                              }
                            };
                          }
                        }

                        if ((0, _Column.isColumn)(possibleCells)) {
                          var columnID = possibleCells[0].columnID;

                          var _total = grid.column[columnID].cells.filter(function (v) {
                            return v.possibilities.has(_digit);
                          });

                          if (possibleCells.length < _total.length) {
                            var _locked = grid.column[columnID];

                            var _ids = possibleCells.map(function (v) {
                              return v.id;
                            });

                            return {
                              v: {
                                ids: _ids,
                                digit: _digit,
                                house: _house,
                                locked: _locked,
                                strategy: _this
                              }
                            };
                          }
                        }
                      }
                    };

                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                      for (var _iterator3 = _house.unused[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var _digit = _step3.value;

                        var _ret2 = _loop2(_digit);

                        if (_typeof(_ret2) === "object") return _ret2.v;
                      }
                    } catch (err) {
                      _didIteratorError3 = true;
                      _iteratorError3 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                          _iterator3.return();
                        }
                      } finally {
                        if (_didIteratorError3) {
                          throw _iteratorError3;
                        }
                      }
                    }

                    break;

                  default:
                    break;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return undefined;
          }
        }, {
          key: "apply",
          value: function apply(grid, step) {
            grid[step.locked.type][step.locked.id].cells.filter(function (v) {
              return step.ids.indexOf(v.id) === -1;
            }).filter(function (v) {
              return v.possibilities.has(step.digit);
            }).forEach(function (v) {
              v.addToImpossibilities(step.digit);
            });
            return true;
          }
        }]);

        return LockedCandidate;
      }();

      exports.default = LockedCandidate;
      /***/
    },
    /* 14 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      var makeChainLink = function makeChainLink(grid, node, cells, size) {
        var chain = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
        var visited = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
        var out = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];

        var processLink = function processLink(node, chain) {
          var excluded = _toConsumableArray(chain[0].cell.canSee).filter(function (v) {
            return node.cell.canSee.has(v);
          }).filter(function (v) {
            return v.possibilities.has(node.mustBe);
          });

          var sameRow = chain[0].cell.rowID === node.cell.rowID;
          var sameColumn = chain[0].cell.columnID === node.cell.columnID;
          var sameSquare = chain[0].cell.squareID === node.cell.squareID;

          if (excluded.length && !sameRow && !sameColumn && !sameSquare) {
            visited.push(node.cell.id);
            out.push(chain);
          }
        };

        var nextLink = function nextLink(house, node) {
          var links = house.links[node.mustBe].filter(function (v) {
            return visited.indexOf(v.id) === -1;
          }).filter(function (v) {
            return v.id !== cell.id;
          });

          if (links.length) {
            var linkCell = grid.cells[links[0].id];

            var mustBe = _toConsumableArray(linkCell.possibilities.values()).filter(function (v) {
              return v !== node.mustBe;
            })[0];

            var cannotBe = _toConsumableArray(linkCell.possibilities.values()).filter(function (v) {
              return v !== mustBe;
            })[0];

            makeChainLink(grid, {
              cell: linkCell,
              mustBe: mustBe,
              cannotBe: cannotBe
            }, cells.filter(function (v) {
              return v.id !== cell.id;
            }), size, chain.slice(0), visited, out);
          }
        };

        var cell = node.cell;
        chain.push(node);

        if (!cells.length || chain.length > size) {
          return;
        }

        if (node.mustBe === chain[0].cannotBe) {
          processLink(node, chain);
        } else {
          // row
          if (grid.row[cell.rowID].links[node.mustBe]) {
            nextLink(grid.row[cell.rowID], node);
          } // column


          if (grid.column[cell.columnID].links[node.mustBe]) {
            nextLink(grid.column[cell.columnID], node);
          } // square


          if (grid.square[cell.squareID].links[node.mustBe]) {
            nextLink(grid.square[cell.squareID], node);
          }
        }

        return out;
      };

      var XYChain =
      /*#__PURE__*/
      function () {
        function XYChain() {
          _classCallCheck(this, XYChain);

          this.type = "XYChain";
          return this;
        }

        _createClass(XYChain, [{
          key: "find",
          value: function find(grid) {
            var _this = this;

            var candidateHouses = grid.house.filter(function (house) {
              return house.unused.size > 0;
            });

            for (var size = 3; size < 10; size++) {
              var _loop = function _loop(digit) {
                var bivalueCells = grid.cells.filter(function (v) {
                  return v.possibilities.size === 2;
                });
                var startCells = bivalueCells.filter(function (v) {
                  return v.possibilities.has(digit);
                });

                var _loop2 = function _loop2() {
                  var cell = startCells[0];
                  startCells = startCells.filter(function (v) {
                    return v.id !== cell.id;
                  });
                  bivalueCells = bivalueCells.filter(function (v) {
                    return v.id !== cell.id;
                  });

                  var mustBe = _toConsumableArray(cell.possibilities).filter(function (v) {
                    return v !== digit;
                  })[0];

                  var node = {
                    cell: cell,
                    mustBe: mustBe,
                    cannotBe: digit
                  };
                  var chain = makeChainLink(grid, node, bivalueCells.map(function (v) {
                    return v.id;
                  }), size);

                  if (chain && chain.length && chain[0].length) {
                    return {
                      v: {
                        v: {
                          chain: chain,
                          type: "XYChain",
                          length: chain.length,
                          strategy: _this
                        }
                      }
                    };
                  }
                };

                while (startCells.length) {
                  var _ret2 = _loop2();

                  if (_typeof(_ret2) === "object") return _ret2.v;
                }
              };

              for (var digit = 1; digit <= 9; digit++) {
                var _ret = _loop(digit);

                if (_typeof(_ret) === "object") return _ret.v;
              }
            }

            return undefined;
          }
        }, {
          key: "apply",
          value: function apply(grid, step) {
            var start = step.chain[0][0];
            var end = step.chain[0][step.chain.length - 1]; //console.log(start)

            var excluded = _toConsumableArray(start.cell.canSee).filter(function (v) {
              return end.cell.canSee.has(v);
            }).filter(function (v) {
              return v.possibilities.has(start.cannotBe);
            }).forEach(function (v) {
              v.addToImpossibilities(end.mustBe);
            });

            return excluded;
          }
        }]);

        return XYChain;
      }();

      exports.default = XYChain;
      /***/
    },
    /* 15 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      var byDigit = function byDigit(digit) {
        return function (house) {
          return house.cells.filter(function (cell) {
            return cell.possibilities.has(digit);
          }).length >= 2;
        };
      };

      var linkToColumns = function linkToColumns(digit) {
        return function (row) {
          var columnIDs = row.cells.filter(function (v) {
            return v.possibilities.has(digit);
          }).map(function (v) {
            return v.columnID;
          });
          return {
            rowID: row.id,
            columnIDs: columnIDs
          };
        };
      };

      var extractUniqueFishColumns = function extractUniqueFishColumns(possibleFishRows, rowsAndThierColumns) {
        var fishColumns = [];

        var _loop = function _loop(i) {
          var row = rowsAndThierColumns.find(function (row) {
            return row.rowID === possibleFishRows[i];
          });
          var columnIDs = row.columnIDs;
          fishColumns.push.apply(fishColumns, _toConsumableArray(columnIDs));
        };

        for (var i = 0; i < possibleFishRows.length; i++) {
          _loop(i);
        }

        return _toConsumableArray(new Set(fishColumns));
      };

      var canExcludeCellsBasedOnFish = function canExcludeCellsBasedOnFish(grid, digit, fishRows, fishColumns) {
        var cellsToExclude = grid.cells.filter(function (v) {
          return v.possibilities.has(digit);
        }).filter(function (v) {
          return fishRows.indexOf(v.rowID) === -1;
        }).filter(function (v) {
          return fishColumns.indexOf(v.columnID) > -1;
        });
        return cellsToExclude.length;
      };

      var combinations = function combinations(str, length) {
        var fn = function fn(rest, length) {
          var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

          if (!active.length && !rest.length) {
            return;
          }

          if (!rest.length) {
            if (active.length === length) {
              out.push(active);
            }
          } else {
            fn(rest.slice(1), length, active.concat(rest[0]), out);
            fn(rest.slice(1), length, active, out);
          }

          return out;
        };

        return fn(str, length);
      };

      var Fish =
      /*#__PURE__*/
      function () {
        function Fish() {
          _classCallCheck(this, Fish);

          this.type = "Fish";
          return this;
        }

        _createClass(Fish, [{
          key: "find",
          value: function find(grid) {
            for (var digit = 1; digit <= 9; digit++) {
              var rowsWithDigitTwice = grid.row.filter(byDigit(digit));

              if (rowsWithDigitTwice.length) {
                var rowsAndThierColumns = rowsWithDigitTwice.map(linkToColumns(digit)).filter(function (v) {
                  return v.columnIDs.length >= 2;
                });

                if (rowsAndThierColumns.length) {
                  // 2 == XY-Wing
                  // 3 == swordfish
                  // 4 == jellyfish
                  for (var size = 2; size <= 4; size++) {
                    var rowIDs = rowsAndThierColumns.map(function (row) {
                      return row.rowID;
                    }); // all possible rowID combinations (where row contains digit) of required size

                    var possibleSetOfFishRowCombinations = combinations(rowIDs, size);
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                      for (var _iterator = possibleSetOfFishRowCombinations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _possibleFishRows = _step.value;
                        var fishColumns = extractUniqueFishColumns(_possibleFishRows, rowsAndThierColumns); // fishColumns and possibleSetOfFishRows are both equal to size required, so we have a fish

                        if (fishColumns.length === size) {
                          var fishRows = _possibleFishRows; // dont return unless it progresses grid solving

                          if (canExcludeCellsBasedOnFish(grid, digit, fishRows, fishColumns)) {
                            return {
                              digit: digit,
                              rows: fishRows,
                              columns: fishColumns,
                              length: fishRows.length,
                              strategy: this
                            };
                          }
                        }
                      }
                    } catch (err) {
                      _didIteratorError = true;
                      _iteratorError = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                          _iterator.return();
                        }
                      } finally {
                        if (_didIteratorError) {
                          throw _iteratorError;
                        }
                      }
                    }
                  }
                }
              }
            }

            return undefined;
          }
        }, {
          key: "apply",
          value: function apply(grid, step) {
            grid.cells.filter(function (v) {
              return v.possibilities.has(step.digit);
            }).filter(function (v) {
              return step.rows.indexOf(v.rowID) === -1;
            }).filter(function (v) {
              return step.columns.indexOf(v.columnID) > -1;
            }).forEach(function (v) {
              v.addToImpossibilities(step.digit);
            });
            return true;
          }
        }]);

        return Fish;
      }();

      exports.default = Fish;
      /***/
    },
    /* 16 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isValid;

      var _Solver = _interopRequireDefault(__webpack_require__(1));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function isValid(text) {
        function hasDuplicates(a) {
          return a.length - new Set(a).size;
        }

        var rows = text.match(/.{1,9}/g);
        var grid = {};
        grid.row = [];
        grid.column = [];
        grid.square = [];

        for (var i = 0; i < 9; i++) {
          grid.row[i] = [];
          grid.column[i] = [];
          grid.square[i] = [];
        }

        if (rows.length !== 9) {
          return {
            isValid: false,
            message: "Grid does not contain 9 rows"
          };
        }

        var row = [];

        for (var rowID = 0; rowID < 9; rowID++) {
          row = rows[rowID].split("");

          if (row.length !== 9) {
            return {
              isValid: false,
              message: "Grid does not contain 9 numbers in row"
            };
          }

          row = row.map(Number).filter(function (v) {
            return !isNaN(v);
          });

          if (row.length !== 9) {
            return {
              isValid: false,
              message: "Grid contains non numeric values"
            };
          }

          grid.row[rowID] = row;

          for (var columnID = 0; columnID < 9; columnID++) {
            var squareID = Math.floor(rowID / 3) * 3 + Math.floor(columnID / 3);
            grid.column[columnID].push(row[columnID]);
            grid.square[squareID].push(row[columnID]);
          }
        }

        var _arr = ["row", "column", "square"];

        for (var _i = 0; _i < _arr.length; _i++) {
          var house = _arr[_i];
          var nonZeroTotal = 0;

          for (var _i2 = 0; _i2 < 9; _i2++) {
            var nonZeroValues = grid[house][_i2].filter(function (v) {
              return v !== 0;
            });

            if (nonZeroValues.length) {
              nonZeroTotal = nonZeroTotal + nonZeroValues.length;

              if (hasDuplicates(nonZeroValues)) {
                return {
                  isValid: false,
                  message: "Grid contains duplicates in ".concat(house, " ").concat(_i2 + 1)
                };
              }
            }
          }

          if (nonZeroTotal < 17) {
            return {
              isValid: false,
              message: "Grid contains less than 17 digits"
            };
          }
        }

        var solver = new _Solver.default(text).solve();

        if (solver.isSolved()) {
          return {
            isValid: true,
            message: "Grid can be solved"
          };
        }

        return {
          isValid: false,
          message: "Grid can not be solved by this tool"
        };
      }
      /***/

    }
    /******/
    ])
  );
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)(module)))

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var addSorting = function () {
  "use strict";

  var cols,
      currentSort = {
    index: 0,
    desc: false
  }; // returns the summary table element

  function getTable() {
    return document.querySelector(".coverage-summary");
  } // returns the thead element of the summary table


  function getTableHeader() {
    return getTable().querySelector("thead tr");
  } // returns the tbody element of the summary table


  function getTableBody() {
    return getTable().querySelector("tbody");
  } // returns the th element for nth column


  function getNthColumn(n) {
    return getTableHeader().querySelectorAll("th")[n];
  } // loads all columns


  function loadColumns() {
    var colNodes = getTableHeader().querySelectorAll("th"),
        colNode,
        cols = [],
        col,
        i;

    for (i = 0; i < colNodes.length; i += 1) {
      colNode = colNodes[i];
      col = {
        key: colNode.getAttribute("data-col"),
        sortable: !colNode.getAttribute("data-nosort"),
        type: colNode.getAttribute("data-type") || "string"
      };
      cols.push(col);

      if (col.sortable) {
        col.defaultDescSort = col.type === "number";
        colNode.innerHTML = colNode.innerHTML + '<span class="sorter"></span>';
      }
    }

    return cols;
  } // attaches a data attribute to every tr element with an object
  // of data values keyed by column name


  function loadRowData(tableRow) {
    var tableCols = tableRow.querySelectorAll("td"),
        colNode,
        col,
        data = {},
        i,
        val;

    for (i = 0; i < tableCols.length; i += 1) {
      colNode = tableCols[i];
      col = cols[i];
      val = colNode.getAttribute("data-value");

      if (col.type === "number") {
        val = Number(val);
      }

      data[col.key] = val;
    }

    return data;
  } // loads all row data


  function loadData() {
    var rows = getTableBody().querySelectorAll("tr"),
        i;

    for (i = 0; i < rows.length; i += 1) {
      rows[i].data = loadRowData(rows[i]);
    }
  } // sorts the table using the data for the ith column


  function sortByIndex(index, desc) {
    var key = cols[index].key,
        sorter = function sorter(a, b) {
      a = a.data[key];
      b = b.data[key];
      return a < b ? -1 : a > b ? 1 : 0;
    },
        finalSorter = sorter,
        tableBody = document.querySelector(".coverage-summary tbody"),
        rowNodes = tableBody.querySelectorAll("tr"),
        rows = [],
        i;

    if (desc) {
      finalSorter = function finalSorter(a, b) {
        return -1 * sorter(a, b);
      };
    }

    for (i = 0; i < rowNodes.length; i += 1) {
      rows.push(rowNodes[i]);
      tableBody.removeChild(rowNodes[i]);
    }

    rows.sort(finalSorter);

    for (i = 0; i < rows.length; i += 1) {
      tableBody.appendChild(rows[i]);
    }
  } // removes sort indicators for current column being sorted


  function removeSortIndicators() {
    var col = getNthColumn(currentSort.index),
        cls = col.className;
    cls = cls.replace(/ sorted$/, "").replace(/ sorted-desc$/, "");
    col.className = cls;
  } // adds sort indicators for current column being sorted


  function addSortIndicators() {
    getNthColumn(currentSort.index).className += currentSort.desc ? " sorted-desc" : " sorted";
  } // adds event listeners for all sorter widgets


  function enableUI() {
    var i,
        el,
        ithSorter = function ithSorter(i) {
      var col = cols[i];
      return function () {
        var desc = col.defaultDescSort;

        if (currentSort.index === i) {
          desc = !currentSort.desc;
        }

        sortByIndex(i, desc);
        removeSortIndicators();
        currentSort.index = i;
        currentSort.desc = desc;
        addSortIndicators();
      };
    };

    for (i = 0; i < cols.length; i += 1) {
      if (cols[i].sortable) {
        // add the click event handler on the th so users
        // dont have to click on those tiny arrows
        el = getNthColumn(i).querySelector(".sorter").parentElement;

        if (el.addEventListener) {
          el.addEventListener("click", ithSorter(i));
        } else {
          el.attachEvent("onclick", ithSorter(i));
        }
      }
    }
  } // adds sorting functionality to the UI


  return function () {
    if (!getTable()) {
      return;
    }

    cols = loadColumns();
    loadData(cols);
    addSortIndicators();
    enableUI();
  };
}();

window.addEventListener("load", addSorting);

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


window.PR_SHOULD_USE_CONTINUATION = true;

(function () {
  var h = ["break,continue,do,else,for,if,return,while"];
  var u = [h, "auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"];
  var p = [u, "catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"];
  var l = [p, "alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"];
  var x = [p, "abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"];
  var R = [x, "as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"];
  var r = "all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes";
  var w = [p, "debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"];
  var s = "caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END";
  var I = [h, "and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"];
  var f = [h, "alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"];
  var H = [h, "case,done,elif,esac,eval,fi,function,in,local,set,then,until"];
  var A = [l, R, w, s + I, f, H];
  var e = /^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/;
  var C = "str";
  var z = "kwd";
  var j = "com";
  var O = "typ";
  var G = "lit";
  var L = "pun";
  var F = "pln";
  var m = "tag";
  var E = "dec";
  var J = "src";
  var P = "atn";
  var n = "atv";
  var N = "nocode";
  var M = "(?:^^\\.?|[+-]|\\!|\\!=|\\!==|\\#|\\%|\\%=|&|&&|&&=|&=|\\(|\\*|\\*=|\\+=|\\,|\\-=|\\->|\\/|\\/=|:|::|\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\@|\\[|\\^|\\^=|\\^\\^|\\^\\^=|\\{|\\||\\|=|\\|\\||\\|\\|=|\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*";

  function k(Z) {
    var ad = 0;
    var S = false;
    var ac = false;

    for (var V = 0, U = Z.length; V < U; ++V) {
      var ae = Z[V];

      if (ae.ignoreCase) {
        ac = true;
      } else {
        if (/[a-z]/i.test(ae.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi, ""))) {
          S = true;
          ac = false;
          break;
        }
      }
    }

    var Y = {
      b: 8,
      t: 9,
      n: 10,
      v: 11,
      f: 12,
      r: 13
    };

    function ab(ah) {
      var ag = ah.charCodeAt(0);

      if (ag !== 92) {
        return ag;
      }

      var af = ah.charAt(1);
      ag = Y[af];

      if (ag) {
        return ag;
      } else {
        if ("0" <= af && af <= "7") {
          return parseInt(ah.substring(1), 8);
        } else {
          if (af === "u" || af === "x") {
            return parseInt(ah.substring(2), 16);
          } else {
            return ah.charCodeAt(1);
          }
        }
      }
    }

    function T(af) {
      if (af < 32) {
        return (af < 16 ? "\\x0" : "\\x") + af.toString(16);
      }

      var ag = String.fromCharCode(af);

      if (ag === "\\" || ag === "-" || ag === "[" || ag === "]") {
        ag = "\\" + ag;
      }

      return ag;
    }

    function X(am) {
      var aq = am.substring(1, am.length - 1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]", "g"));
      var ak = [];
      var af = [];
      var ao = aq[0] === "^";

      for (var ar = ao ? 1 : 0, aj = aq.length; ar < aj; ++ar) {
        var ah = aq[ar];

        if (/\\[bdsw]/i.test(ah)) {
          ak.push(ah);
        } else {
          var ag = ab(ah);
          var al;

          if (ar + 2 < aj && "-" === aq[ar + 1]) {
            al = ab(aq[ar + 2]);
            ar += 2;
          } else {
            al = ag;
          }

          af.push([ag, al]);

          if (!(al < 65 || ag > 122)) {
            if (!(al < 65 || ag > 90)) {
              af.push([Math.max(65, ag) | 32, Math.min(al, 90) | 32]);
            }

            if (!(al < 97 || ag > 122)) {
              af.push([Math.max(97, ag) & ~32, Math.min(al, 122) & ~32]);
            }
          }
        }
      }

      af.sort(function (av, au) {
        return av[0] - au[0] || au[1] - av[1];
      });
      var ai = [];
      var ap = [NaN, NaN];

      for (var ar = 0; ar < af.length; ++ar) {
        var at = af[ar];

        if (at[0] <= ap[1] + 1) {
          ap[1] = Math.max(ap[1], at[1]);
        } else {
          ai.push(ap = at);
        }
      }

      var an = ["["];

      if (ao) {
        an.push("^");
      }

      an.push.apply(an, ak);

      for (var ar = 0; ar < ai.length; ++ar) {
        var at = ai[ar];
        an.push(T(at[0]));

        if (at[1] > at[0]) {
          if (at[1] + 1 > at[0]) {
            an.push("-");
          }

          an.push(T(at[1]));
        }
      }

      an.push("]");
      return an.join("");
    }

    function W(al) {
      var aj = al.source.match(new RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)", "g"));
      var ah = aj.length;
      var an = [];

      for (var ak = 0, am = 0; ak < ah; ++ak) {
        var ag = aj[ak];

        if (ag === "(") {
          ++am;
        } else {
          if ("\\" === ag.charAt(0)) {
            var af = +ag.substring(1);

            if (af && af <= am) {
              an[af] = -1;
            }
          }
        }
      }

      for (var ak = 1; ak < an.length; ++ak) {
        if (-1 === an[ak]) {
          an[ak] = ++ad;
        }
      }

      for (var ak = 0, am = 0; ak < ah; ++ak) {
        var ag = aj[ak];

        if (ag === "(") {
          ++am;

          if (an[am] === undefined) {
            aj[ak] = "(?:";
          }
        } else {
          if ("\\" === ag.charAt(0)) {
            var af = +ag.substring(1);

            if (af && af <= am) {
              aj[ak] = "\\" + an[am];
            }
          }
        }
      }

      for (var ak = 0, am = 0; ak < ah; ++ak) {
        if ("^" === aj[ak] && "^" !== aj[ak + 1]) {
          aj[ak] = "";
        }
      }

      if (al.ignoreCase && S) {
        for (var ak = 0; ak < ah; ++ak) {
          var ag = aj[ak];
          var ai = ag.charAt(0);

          if (ag.length >= 2 && ai === "[") {
            aj[ak] = X(ag);
          } else {
            if (ai !== "\\") {
              aj[ak] = ag.replace(/[a-zA-Z]/g, function (ao) {
                var ap = ao.charCodeAt(0);
                return "[" + String.fromCharCode(ap & ~32, ap | 32) + "]";
              });
            }
          }
        }
      }

      return aj.join("");
    }

    var aa = [];

    for (var V = 0, U = Z.length; V < U; ++V) {
      var ae = Z[V];

      if (ae.global || ae.multiline) {
        throw new Error("" + ae);
      }

      aa.push("(?:" + W(ae) + ")");
    }

    return new RegExp(aa.join("|"), ac ? "gi" : "g");
  }

  function a(V) {
    var U = /(?:^|\s)nocode(?:\s|$)/;
    var X = [];
    var T = 0;
    var Z = [];
    var W = 0;
    var S;

    if (V.currentStyle) {
      S = V.currentStyle.whiteSpace;
    } else {
      if (window.getComputedStyle) {
        S = document.defaultView.getComputedStyle(V, null).getPropertyValue("white-space");
      }
    }

    var Y = S && "pre" === S.substring(0, 3);

    function aa(ab) {
      switch (ab.nodeType) {
        case 1:
          if (U.test(ab.className)) {
            return;
          }

          for (var ae = ab.firstChild; ae; ae = ae.nextSibling) {
            aa(ae);
          }

          var ad = ab.nodeName;

          if ("BR" === ad || "LI" === ad) {
            X[W] = "\n";
            Z[W << 1] = T++;
            Z[W++ << 1 | 1] = ab;
          }

          break;

        case 3:
        case 4:
          var ac = ab.nodeValue;

          if (ac.length) {
            if (!Y) {
              ac = ac.replace(/[ \t\r\n]+/g, " ");
            } else {
              ac = ac.replace(/\r\n?/g, "\n");
            }

            X[W] = ac;
            Z[W << 1] = T;
            T += ac.length;
            Z[W++ << 1 | 1] = ab;
          }

          break;
      }
    }

    aa(V);
    return {
      sourceCode: X.join("").replace(/\n$/, ""),
      spans: Z
    };
  }

  function B(S, U, W, T) {
    if (!U) {
      return;
    }

    var V = {
      sourceCode: U,
      basePos: S
    };
    W(V);
    T.push.apply(T, V.decorations);
  }

  var v = /\S/;

  function o(S) {
    var V = undefined;

    for (var U = S.firstChild; U; U = U.nextSibling) {
      var T = U.nodeType;
      V = T === 1 ? V ? S : U : T === 3 ? v.test(U.nodeValue) ? S : V : V;
    }

    return V === S ? undefined : V;
  }

  function g(U, T) {
    var S = {};
    var V;

    (function () {
      var ad = U.concat(T);
      var ah = [];
      var ag = {};

      for (var ab = 0, Z = ad.length; ab < Z; ++ab) {
        var Y = ad[ab];
        var ac = Y[3];

        if (ac) {
          for (var ae = ac.length; --ae >= 0;) {
            S[ac.charAt(ae)] = Y;
          }
        }

        var af = Y[1];
        var aa = "" + af;

        if (!ag.hasOwnProperty(aa)) {
          ah.push(af);
          ag[aa] = null;
        }
      }

      ah.push(/[\0-\uffff]/);
      V = k(ah);
    })();

    var X = T.length;

    var W = function W(ah) {
      var Z = ah.sourceCode,
          Y = ah.basePos;
      var ad = [Y, F];
      var af = 0;
      var an = Z.match(V) || [];
      var aj = {};

      for (var ae = 0, aq = an.length; ae < aq; ++ae) {
        var ag = an[ae];
        var ap = aj[ag];
        var ai = void 0;
        var am;

        if (typeof ap === "string") {
          am = false;
        } else {
          var aa = S[ag.charAt(0)];

          if (aa) {
            ai = ag.match(aa[1]);
            ap = aa[0];
          } else {
            for (var ao = 0; ao < X; ++ao) {
              aa = T[ao];
              ai = ag.match(aa[1]);

              if (ai) {
                ap = aa[0];
                break;
              }
            }

            if (!ai) {
              ap = F;
            }
          }

          am = ap.length >= 5 && "lang-" === ap.substring(0, 5);

          if (am && !(ai && typeof ai[1] === "string")) {
            am = false;
            ap = J;
          }

          if (!am) {
            aj[ag] = ap;
          }
        }

        var ab = af;
        af += ag.length;

        if (!am) {
          ad.push(Y + ab, ap);
        } else {
          var al = ai[1];
          var ak = ag.indexOf(al);
          var ac = ak + al.length;

          if (ai[2]) {
            ac = ag.length - ai[2].length;
            ak = ac - al.length;
          }

          var ar = ap.substring(5);
          B(Y + ab, ag.substring(0, ak), W, ad);
          B(Y + ab + ak, al, q(ar, al), ad);
          B(Y + ab + ac, ag.substring(ac), W, ad);
        }
      }

      ah.decorations = ad;
    };

    return W;
  }

  function i(T) {
    var W = [],
        S = [];

    if (T.tripleQuotedStrings) {
      W.push([C, /^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/, null, "'\""]);
    } else {
      if (T.multiLineStrings) {
        W.push([C, /^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/, null, "'\"`"]);
      } else {
        W.push([C, /^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/, null, "\"'"]);
      }
    }

    if (T.verbatimStrings) {
      S.push([C, /^@\"(?:[^\"]|\"\")*(?:\"|$)/, null]);
    }

    var Y = T.hashComments;

    if (Y) {
      if (T.cStyleComments) {
        if (Y > 1) {
          W.push([j, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, "#"]);
        } else {
          W.push([j, /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\r\n]*)/, null, "#"]);
        }

        S.push([C, /^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/, null]);
      } else {
        W.push([j, /^#[^\r\n]*/, null, "#"]);
      }
    }

    if (T.cStyleComments) {
      S.push([j, /^\/\/[^\r\n]*/, null]);
      S.push([j, /^\/\*[\s\S]*?(?:\*\/|$)/, null]);
    }

    if (T.regexLiterals) {
      var X = "/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/";
      S.push(["lang-regex", new RegExp("^" + M + "(" + X + ")")]);
    }

    var V = T.types;

    if (V) {
      S.push([O, V]);
    }

    var U = ("" + T.keywords).replace(/^ | $/g, "");

    if (U.length) {
      S.push([z, new RegExp("^(?:" + U.replace(/[\s,]+/g, "|") + ")\\b"), null]);
    }

    W.push([F, /^\s+/, null, " \r\n\t\xA0"]);
    S.push([G, /^@[a-z_$][a-z_$@0-9]*/i, null], [O, /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/, null], [F, /^[a-z_$][a-z_$@0-9]*/i, null], [G, new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*", "i"), null, "0123456789"], [F, /^\\[\s\S]?/, null], [L, /^.[^\s\w\.$@\'\"\`\/\#\\]*/, null]);
    return g(W, S);
  }

  var K = i({
    keywords: A,
    hashComments: true,
    cStyleComments: true,
    multiLineStrings: true,
    regexLiterals: true
  });

  function Q(V, ag) {
    var U = /(?:^|\s)nocode(?:\s|$)/;
    var ab = /\r\n?|\n/;
    var ac = V.ownerDocument;
    var S;

    if (V.currentStyle) {
      S = V.currentStyle.whiteSpace;
    } else {
      if (window.getComputedStyle) {
        S = ac.defaultView.getComputedStyle(V, null).getPropertyValue("white-space");
      }
    }

    var Z = S && "pre" === S.substring(0, 3);
    var af = ac.createElement("LI");

    while (V.firstChild) {
      af.appendChild(V.firstChild);
    }

    var W = [af];

    function ae(al) {
      switch (al.nodeType) {
        case 1:
          if (U.test(al.className)) {
            break;
          }

          if ("BR" === al.nodeName) {
            ad(al);

            if (al.parentNode) {
              al.parentNode.removeChild(al);
            }
          } else {
            for (var an = al.firstChild; an; an = an.nextSibling) {
              ae(an);
            }
          }

          break;

        case 3:
        case 4:
          if (Z) {
            var am = al.nodeValue;
            var aj = am.match(ab);

            if (aj) {
              var ai = am.substring(0, aj.index);
              al.nodeValue = ai;
              var ah = am.substring(aj.index + aj[0].length);

              if (ah) {
                var ak = al.parentNode;
                ak.insertBefore(ac.createTextNode(ah), al.nextSibling);
              }

              ad(al);

              if (!ai) {
                al.parentNode.removeChild(al);
              }
            }
          }

          break;
      }
    }

    function ad(ak) {
      while (!ak.nextSibling) {
        ak = ak.parentNode;

        if (!ak) {
          return;
        }
      }

      function ai(al, ar) {
        var aq = ar ? al.cloneNode(false) : al;
        var ao = al.parentNode;

        if (ao) {
          var ap = ai(ao, 1);
          var an = al.nextSibling;
          ap.appendChild(aq);

          for (var am = an; am; am = an) {
            an = am.nextSibling;
            ap.appendChild(am);
          }
        }

        return aq;
      }

      var ah = ai(ak.nextSibling, 0);

      for (var aj; (aj = ah.parentNode) && aj.nodeType === 1;) {
        ah = aj;
      }

      W.push(ah);
    }

    for (var Y = 0; Y < W.length; ++Y) {
      ae(W[Y]);
    }

    if (ag === (ag | 0)) {
      W[0].setAttribute("value", ag);
    }

    var aa = ac.createElement("OL");
    aa.className = "linenums";
    var X = Math.max(0, ag - 1 | 0) || 0;

    for (var Y = 0, T = W.length; Y < T; ++Y) {
      af = W[Y];
      af.className = "L" + (Y + X) % 10;

      if (!af.firstChild) {
        af.appendChild(ac.createTextNode("\xA0"));
      }

      aa.appendChild(af);
    }

    V.appendChild(aa);
  }

  function D(ac) {
    var aj = /\bMSIE\b/.test(navigator.userAgent);
    var am = /\n/g;
    var al = ac.sourceCode;
    var an = al.length;
    var V = 0;
    var aa = ac.spans;
    var T = aa.length;
    var ah = 0;
    var X = ac.decorations;
    var Y = X.length;
    var Z = 0;
    X[Y] = an;
    var ar, aq;

    for (aq = ar = 0; aq < Y;) {
      if (X[aq] !== X[aq + 2]) {
        X[ar++] = X[aq++];
        X[ar++] = X[aq++];
      } else {
        aq += 2;
      }
    }

    Y = ar;

    for (aq = ar = 0; aq < Y;) {
      var at = X[aq];
      var ab = X[aq + 1];
      var W = aq + 2;

      while (W + 2 <= Y && X[W + 1] === ab) {
        W += 2;
      }

      X[ar++] = at;
      X[ar++] = ab;
      aq = W;
    }

    Y = X.length = ar;
    var ae = null;

    while (ah < T) {
      var af = aa[ah];
      var S = aa[ah + 2] || an;
      var ag = X[Z];
      var ap = X[Z + 2] || an;
      var W = Math.min(S, ap);
      var ak = aa[ah + 1];
      var U;

      if (ak.nodeType !== 1 && (U = al.substring(V, W))) {
        if (aj) {
          U = U.replace(am, "\r");
        }

        ak.nodeValue = U;
        var ai = ak.ownerDocument;
        var ao = ai.createElement("SPAN");
        ao.className = X[Z + 1];
        var ad = ak.parentNode;
        ad.replaceChild(ao, ak);
        ao.appendChild(ak);

        if (V < S) {
          aa[ah + 1] = ak = ai.createTextNode(al.substring(W, S));
          ad.insertBefore(ak, ao.nextSibling);
        }
      }

      V = W;

      if (V >= S) {
        ah += 2;
      }

      if (V >= ap) {
        Z += 2;
      }
    }
  }

  var t = {};

  function c(U, V) {
    for (var S = V.length; --S >= 0;) {
      var T = V[S];

      if (!t.hasOwnProperty(T)) {
        t[T] = U;
      } else {
        if (window.console) {
          console.warn("cannot override language handler %s", T);
        }
      }
    }
  }

  function q(T, S) {
    if (!(T && t.hasOwnProperty(T))) {
      T = /^\s*</.test(S) ? "default-markup" : "default-code";
    }

    return t[T];
  }

  c(K, ["default-code"]);
  c(g([], [[F, /^[^<?]+/], [E, /^<!\w[^>]*(?:>|$)/], [j, /^<\!--[\s\S]*?(?:-\->|$)/], ["lang-", /^<\?([\s\S]+?)(?:\?>|$)/], ["lang-", /^<%([\s\S]+?)(?:%>|$)/], [L, /^(?:<[%?]|[%?]>)/], ["lang-", /^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i], ["lang-js", /^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i], ["lang-css", /^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i], ["lang-in.tag", /^(<\/?[a-z][^<>]*>)/i]]), ["default-markup", "htm", "html", "mxml", "xhtml", "xml", "xsl"]);
  c(g([[F, /^[\s]+/, null, " \t\r\n"], [n, /^(?:\"[^\"]*\"?|\'[^\']*\'?)/, null, "\"'"]], [[m, /^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i], [P, /^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i], ["lang-uq.val", /^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/], [L, /^[=<>\/]+/], ["lang-js", /^on\w+\s*=\s*\"([^\"]+)\"/i], ["lang-js", /^on\w+\s*=\s*\'([^\']+)\'/i], ["lang-js", /^on\w+\s*=\s*([^\"\'>\s]+)/i], ["lang-css", /^style\s*=\s*\"([^\"]+)\"/i], ["lang-css", /^style\s*=\s*\'([^\']+)\'/i], ["lang-css", /^style\s*=\s*([^\"\'>\s]+)/i]]), ["in.tag"]);
  c(g([], [[n, /^[\s\S]+/]]), ["uq.val"]);
  c(i({
    keywords: l,
    hashComments: true,
    cStyleComments: true,
    types: e
  }), ["c", "cc", "cpp", "cxx", "cyc", "m"]);
  c(i({
    keywords: "null,true,false"
  }), ["json"]);
  c(i({
    keywords: R,
    hashComments: true,
    cStyleComments: true,
    verbatimStrings: true,
    types: e
  }), ["cs"]);
  c(i({
    keywords: x,
    cStyleComments: true
  }), ["java"]);
  c(i({
    keywords: H,
    hashComments: true,
    multiLineStrings: true
  }), ["bsh", "csh", "sh"]);
  c(i({
    keywords: I,
    hashComments: true,
    multiLineStrings: true,
    tripleQuotedStrings: true
  }), ["cv", "py"]);
  c(i({
    keywords: s,
    hashComments: true,
    multiLineStrings: true,
    regexLiterals: true
  }), ["perl", "pl", "pm"]);
  c(i({
    keywords: f,
    hashComments: true,
    multiLineStrings: true,
    regexLiterals: true
  }), ["rb"]);
  c(i({
    keywords: w,
    cStyleComments: true,
    regexLiterals: true
  }), ["js"]);
  c(i({
    keywords: r,
    hashComments: 3,
    cStyleComments: true,
    multilineStrings: true,
    tripleQuotedStrings: true,
    regexLiterals: true
  }), ["coffee"]);
  c(g([], [[C, /^[\s\S]+/]]), ["regex"]);

  function d(V) {
    var U = V.langExtension;

    try {
      var S = a(V.sourceNode);
      var T = S.sourceCode;
      V.sourceCode = T;
      V.spans = S.spans;
      V.basePos = 0;
      q(U, T)(V);
      D(V);
    } catch (W) {
      if ("console" in window) {
        console.log(W && W.stack ? W.stack : W);
      }
    }
  }

  function y(W, V, U) {
    var S = document.createElement("PRE");
    S.innerHTML = W;

    if (U) {
      Q(S, U);
    }

    var T = {
      langExtension: V,
      numberLines: U,
      sourceNode: S
    };
    d(T);
    return S.innerHTML;
  }

  function b(ad) {
    function Y(af) {
      return document.getElementsByTagName(af);
    }

    var ac = [Y("pre"), Y("code"), Y("xmp")];
    var T = [];

    for (var aa = 0; aa < ac.length; ++aa) {
      for (var Z = 0, V = ac[aa].length; Z < V; ++Z) {
        T.push(ac[aa][Z]);
      }
    }

    ac = null;
    var W = Date;

    if (!W.now) {
      W = {
        now: function now() {
          return +new Date();
        }
      };
    }

    var X = 0;
    var S;
    var ab = /\blang(?:uage)?-([\w.]+)(?!\S)/;
    var ae = /\bprettyprint\b/;

    function U() {
      var ag = window.PR_SHOULD_USE_CONTINUATION ? W.now() + 250 : Infinity;

      for (; X < T.length && W.now() < ag; X++) {
        var aj = T[X];
        var ai = aj.className;

        if (ai.indexOf("prettyprint") >= 0) {
          var ah = ai.match(ab);
          var am;

          if (!ah && (am = o(aj)) && "CODE" === am.tagName) {
            ah = am.className.match(ab);
          }

          if (ah) {
            ah = ah[1];
          }

          var al = false;

          for (var ak = aj.parentNode; ak; ak = ak.parentNode) {
            if ((ak.tagName === "pre" || ak.tagName === "code" || ak.tagName === "xmp") && ak.className && ak.className.indexOf("prettyprint") >= 0) {
              al = true;
              break;
            }
          }

          if (!al) {
            var af = aj.className.match(/\blinenums\b(?::(\d+))?/);
            af = af ? af[1] && af[1].length ? +af[1] : true : false;

            if (af) {
              Q(aj, af);
            }

            S = {
              langExtension: ah,
              sourceNode: aj,
              numberLines: af
            };
            d(S);
          }
        }
      }

      if (X < T.length) {
        setTimeout(U, 250);
      } else {
        if (ad) {
          ad();
        }
      }
    }

    U();
  }

  window.prettyPrintOne = y;
  window.prettyPrint = b;
  window.PR = {
    createSimpleLexer: g,
    registerLangHandler: c,
    sourceDecorator: i,
    PR_ATTRIB_NAME: P,
    PR_ATTRIB_VALUE: n,
    PR_COMMENT: j,
    PR_DECLARATION: E,
    PR_KEYWORD: z,
    PR_LITERAL: G,
    PR_NOCODE: N,
    PR_PLAIN: F,
    PR_PUNCTUATION: L,
    PR_SOURCE: J,
    PR_STRING: C,
    PR_TAG: m,
    PR_TYPE: O
  };
})();

PR.registerLangHandler(PR.createSimpleLexer([], [[PR.PR_DECLARATION, /^<!\w[^>]*(?:>|$)/], [PR.PR_COMMENT, /^<\!--[\s\S]*?(?:-\->|$)/], [PR.PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/], ["lang-", /^<\?([\s\S]+?)(?:\?>|$)/], ["lang-", /^<%([\s\S]+?)(?:%>|$)/], ["lang-", /^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i], ["lang-handlebars", /^<script\b[^>]*type\s*=\s*['"]?text\/x-handlebars-template['"]?\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i], ["lang-js", /^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i], ["lang-css", /^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i], ["lang-in.tag", /^(<\/?[a-z][^<>]*>)/i], [PR.PR_DECLARATION, /^{{[#^>/]?\s*[\w.][^}]*}}/], [PR.PR_DECLARATION, /^{{&?\s*[\w.][^}]*}}/], [PR.PR_DECLARATION, /^{{{>?\s*[\w.][^}]*}}}/], [PR.PR_COMMENT, /^{{![^}]*}}/]]), ["handlebars", "hbs"]);
PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN, /^[ \t\r\n\f]+/, null, " \t\r\n\f"]], [[PR.PR_STRING, /^\"(?:[^\n\r\f\\\"]|\\(?:\r\n?|\n|\f)|\\[\s\S])*\"/, null], [PR.PR_STRING, /^\'(?:[^\n\r\f\\\']|\\(?:\r\n?|\n|\f)|\\[\s\S])*\'/, null], ["lang-css-str", /^url\(([^\)\"\']*)\)/i], [PR.PR_KEYWORD, /^(?:url|rgb|\!important|@import|@page|@media|@charset|inherit)(?=[^\-\w]|$)/i, null], ["lang-css-kw", /^(-?(?:[_a-z]|(?:\\[0-9a-f]+ ?))(?:[_a-z0-9\-]|\\(?:\\[0-9a-f]+ ?))*)\s*:/i], [PR.PR_COMMENT, /^\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\//], [PR.PR_COMMENT, /^(?:<!--|-->)/], [PR.PR_LITERAL, /^(?:\d+|\d*\.\d+)(?:%|[a-z]+)?/i], [PR.PR_LITERAL, /^#(?:[0-9a-f]{3}){1,2}/i], [PR.PR_PLAIN, /^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i], [PR.PR_PUNCTUATION, /^[^\s\w\'\"]+/]]), ["css"]);
PR.registerLangHandler(PR.createSimpleLexer([], [[PR.PR_KEYWORD, /^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i]]), ["css-kw"]);
PR.registerLangHandler(PR.createSimpleLexer([], [[PR.PR_STRING, /^[^\)\"\']+/]]), ["css-str"]);

/***/ })
/******/ ]);
});